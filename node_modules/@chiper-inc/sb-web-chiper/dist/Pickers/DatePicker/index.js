"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatePicker = exports.locales = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const date_fns_1 = require("date-fns");
const locale_1 = require("date-fns/locale");
const Icon_1 = require("../../Theme/Icon");
const weeekDays = {
    es: ["L", "M", "M", "J", "V", "S", "D"],
    pt: ["L", "M", "M", "J", "V", "S", "D"],
    en: ["M", "T", "W", "T", "F", "S", "S"],
};
const monthsYear = {
    es: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
    pt: ["Jan", "Fev", "Mar", "Abr", "Maio", "Jun", "Jul", "Ago", "Set", "out", "Nov", "Dez"],
    en: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dic"],
};
exports.locales = {
    es: locale_1.es,
    pt: locale_1.ptBR,
    en: locale_1.enUS,
};
const cellClass = `
    sbw-flex
    sbw-h-[32px]
    sbw-w-[46px]
    sbw-items-center
    sbw-justify-center
    sbw-text-xs
  `;
/**
 * Use `DatePicker` to select a date or range date
 *
 * #### Usage:
 *
 * ```tsx
  import { useState, useCallback } from "react";
  import { DatePicker } from "@chiper-inc/sb-web-chiper";

  const [initRange, setInitRange] = useState<Date | undefined>(undefined);
  const [endRange, setEndRange] = useState<Date | undefined>(undefined);

  const [date, setDate] = useState<Date | undefined>(undefined);

  const handleRangeClick = useCallback((init: Date, end?: Date) => {
    setInitRange(init);
    setEndRange(end);
  }, []);

   const handleDateClick = useCallback((clickedDate: Date) => {
    setDate(clickedDate);
  }, []);

  return (
    <DatePicker
      hasRange
      initDate={initRange}
      endDate={endRange}
      onClick={handleRangeClick}
    />

     <DatePicker
      initDate={date}
      onClick={handleDateClick}
      minDate={new Date("2023/04/05")}
      maxDate={new Date("2023/04/25")}
    />
  );
 * ```
 *
 * #### Demo:
 *
 */
exports.DatePicker = (0, react_1.memo)(({ initDate, endDate, onClick, minDate, maxDate, hasRange, locale = "es", "data-testid": testID = "chiper-date-picker", }) => {
    const [pickerMonths, setPickerMonths] = (0, react_1.useState)(false);
    const [pickerDate, setPickerDate] = (0, react_1.useState)((0, date_fns_1.set)((initDate || new Date()), { hours: 0, minutes: 0, seconds: 0 }));
    const [pickerMaxDate] = (0, react_1.useState)(maxDate && (0, date_fns_1.set)(maxDate, { hours: 23, minutes: 59 }));
    const [pickerMinDate] = (0, react_1.useState)(minDate && (0, date_fns_1.set)(minDate, { hours: 0, minutes: 0 }));
    const onPreviusMonthClick = () => setPickerDate((0, date_fns_1.subMonths)(pickerDate, 1));
    const onNextMonthClick = () => setPickerDate((0, date_fns_1.addMonths)(pickerDate, 1));
    const isSelectedDate = (day) => {
        const currentDate = (0, date_fns_1.setDate)(pickerDate, day);
        return (!!initDate && (0, date_fns_1.isSameDay)(initDate, currentDate))
            || (hasRange && !!endDate && (0, date_fns_1.isSameDay)(endDate, currentDate));
    };
    const isIntoRange = (day) => (hasRange
        && !!initDate
        && !!endDate
        && (0, date_fns_1.isAfter)(endDate, initDate)
        && (0, date_fns_1.isWithinInterval)((0, date_fns_1.setDate)(pickerDate, day), {
            start: initDate,
            end: endDate,
        }));
    const isDisabledDay = (day) => {
        const currentDate = (0, date_fns_1.setDate)(pickerDate, day);
        return (!!pickerMaxDate && (0, date_fns_1.isAfter)(currentDate, pickerMaxDate))
            || (!!pickerMinDate && (0, date_fns_1.isBefore)(currentDate, pickerMinDate));
    };
    const getDaysBeforeCurrentMonth = () => {
        const firstDayIndex = +(0, date_fns_1.format)((0, date_fns_1.startOfMonth)(pickerDate), "c", { locale: locale_1.es });
        const daysOfPrevMonth = (0, date_fns_1.getDaysInMonth)((0, date_fns_1.subMonths)(pickerDate, 1));
        return new Array(firstDayIndex - 1).fill("").map((_, i) => ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: `${cellClass} sbw-text-greyscale-gray60` }, { children: daysOfPrevMonth - firstDayIndex + i + 2 }), `before-day-${_ + i}`)));
    };
    const getDaysAfterCurrentMonth = () => {
        const lastDayIndex = +(0, date_fns_1.format)((0, date_fns_1.endOfMonth)(pickerDate), "c", { locale: locale_1.es });
        return new Array(7 - lastDayIndex).fill("").map((_, i) => ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: `${cellClass} sbw-text-greyscale-gray60` }, { children: i + 1 }), `after-day-${_ + i}`)));
    };
    const onDayClick = (day) => {
        if (!isDisabledDay(day) && !isSelectedDate(day)) {
            const dayClicked = (0, date_fns_1.setDate)(pickerDate, day);
            if (!hasRange || (!!initDate && !!endDate))
                onClick(dayClicked);
            else if (!initDate)
                onClick(dayClicked, endDate);
            else if ((0, date_fns_1.isBefore)(dayClicked, initDate))
                onClick(dayClicked, initDate);
            else
                onClick(initDate, dayClicked);
        }
    };
    const onChangeMonthClick = (month) => {
        const monthClicked = (0, date_fns_1.setMonth)(pickerDate, month);
        setPickerDate(monthClicked);
        setPickerMonths(false);
    };
    const getParticularStyle = (day) => {
        const isRange = isIntoRange(day);
        if (isSelectedDate(day))
            return "sbw-bg-primary-green sbw-text-primary-white";
        if (isDisabledDay(day)) {
            return `sbw-cursor-not-allowed sbw-text-greyscale-gray60 ${isRange ? "sbw-bg-secondary-green10" : ""}`;
        }
        if (isRange)
            return "sbw-bg-secondary-green10 sbw-text-primary-green";
        return `
      ${(0, date_fns_1.isToday)((0, date_fns_1.setDate)(pickerDate, day)) ? "sbw-text-primary-green sbw-bg-greyscale-gray5" : ""}
    `;
    };
    const getDaysOfCurrentMonth = () => {
        const daysNumber = (0, date_fns_1.getDaysInMonth)(pickerDate);
        return new Array(daysNumber).fill("").map((_, i) => ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", className: cellClass, onClick: () => onDayClick(i + 1), "data-testid": "chiper-date-picker-cell" }, { children: (0, jsx_runtime_1.jsx)("div", Object.assign({ className: `
            sbw-flex
            sbw-h-[32px]
            sbw-w-[32px]
            sbw-items-center
            sbw-justify-center
            sbw-rounded-full
            sbw-text-primary-yankeesBlue
            ${getParticularStyle(i + 1)}
          ` }, { children: i + 1 })) }), `day-number-current-${_ + i}`)));
    };
    const getPickerDate = (dateFormat) => ((0, date_fns_1.format)(pickerDate, dateFormat, { locale: exports.locales[locale] }));
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "\n        sbw-flex\n        sbw-w-[322px]\n        sbw-flex-col\n        sbw-rounded\n        sbw-bg-primary-white\n        sbw-shadow-[0px_8px_16px_#2b284514]", "data-testid": testID }, { children: [(0, jsx_runtime_1.jsxs)("div", Object.assign({ className: `
          sbw-flex
          sbw-h-[40px]
          sbw-items-center
          sbw-text-xs
          sbw-capitalize
          sbw-text-primary-yankeesBlue
          ${pickerMonths ? "sbw-justify-center" : "sbw-justify-between"}
        ` }, { children: [!pickerMonths && ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", onClick: onPreviusMonthClick, className: cellClass, "data-testid": "chiper-date-picker-prev-buttom" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "CaretLeft", size: 16 }) }))), (0, jsx_runtime_1.jsxs)("button", Object.assign({ type: "button", onClick: () => setPickerMonths(!pickerMonths), className: "sbw-flex sbw-capitalize" }, { children: [`${getPickerDate("LLLL")} ${getPickerDate("yyyy")}`, pickerMonths && ((0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "CaretUp", className: "sbw-ml-2", size: 16 }))] })), !pickerMonths && ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", onClick: onNextMonthClick, className: cellClass, "data-testid": "chiper-date-picker-next-buttom" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "CaretRight", size: 16 }) })))] })), pickerMonths ? ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: "sbw-grid sbw-grid-cols-3 sbw-gap-3 sbw-gap-y-[4px] sbw-py-[4px]" }, { children: monthsYear[locale].map((months, i) => ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", className: `sbw-px-2 sbw-py-4 ${Number(getPickerDate("L")) === i + 1 ? "sbw-text-lg sbw-text-primary-green" : ""}`, onClick: () => onChangeMonthClick(i) }, { children: months }), `${months + i}`))) }))) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ className: "sbw-flex sbw-w-full sbw-bg-greyscale-gray5" }, { children: weeekDays[locale].map((weekDay, i) => ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: `${cellClass} sbw-text-primary-yankeesBlue` }, { children: weekDay }), `weekday-${weekDay + i}`))) })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-grid sbw-grid-cols-7 sbw-gap-y-[4px] sbw-py-[4px]" }, { children: [getDaysBeforeCurrentMonth(), getDaysOfCurrentMonth(), getDaysAfterCurrentMonth()] }))] }))] })));
});
