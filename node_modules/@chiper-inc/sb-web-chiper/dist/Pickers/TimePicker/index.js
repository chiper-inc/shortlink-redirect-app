"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimePicker = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@phosphor-icons/react");
const Colors_1 = __importDefault(require("../../Theme/Colors"));
/**
 * TimePicker is a component that allows the end
 * user to set a certain time for the use case
 * that the UI requires.
 *
 * #### Usage:
 *
 * ```tsx
  import { TimePicker } from "@chiper-inc/sb-web-chiper";

  <TimePicker />
 * ```
 *
 * #### Demo:
 */
exports.TimePicker = (0, react_1.memo)(({ value, onChange, widthClass = "sbw-w-185", heightClass, classNameContainerMain = "sbw-bg-white sbw-px-2 sbw-py-2.5", maximunMinutes = 60, intervalMinutes = 1, disabled = false, }) => {
    const { yankeesBlue } = Colors_1.default.primary;
    const { gray100 } = Colors_1.default.greyscale;
    const [h, m, s] = value ? value.split("-") : "00-00-m.";
    const [hour, setHour] = (0, react_1.useState)(Number(h));
    const [minutes, setMinutes] = (0, react_1.useState)(Number(m));
    const [systemTime, setSystemTime] = (0, react_1.useState)(s);
    const colorArrow = disabled ? gray100 : yankeesBlue;
    const [disabledSystemT, setDisabledSystemT] = (0, react_1.useState)(false);
    const upHour = () => {
        if (hour >= 12) {
            setHour(1);
        }
        else {
            setHour(hour + 1);
        }
        if (hour === 11 && systemTime === "a.m.") {
            setHour(12);
        }
        if (hour === 11 && systemTime === "p.m.") {
            setHour(0);
            setSystemTime("m.");
        }
        if (hour === 12 && systemTime === "m.") {
            setHour(1);
            setSystemTime("p.m.");
        }
        if (hour === 0 && systemTime === "m.") {
            setHour(1);
            setSystemTime("a.m.");
        }
    };
    const downHour = () => {
        if (hour <= 0) {
            setHour(11);
        }
        else {
            setHour(hour - 1);
        }
        if (hour === 1 && systemTime === "p.m.") {
            setHour(12);
            setSystemTime("m.");
        }
        if (hour === 12 && systemTime === "m.") {
            setSystemTime("a.m.");
        }
        if (hour === 0 || (hour === 12 && systemTime !== "m.")) {
            setSystemTime("p.m.");
        }
    };
    const upMinutes = () => {
        const maxMinutes = maximunMinutes > 59 ? 59 : maximunMinutes;
        if (minutes >= maxMinutes) {
            setMinutes(0);
        }
        else {
            setMinutes(minutes + intervalMinutes);
        }
    };
    const downMinutes = () => {
        const maxMinutes = maximunMinutes > 59 ? 59 : maximunMinutes;
        if (minutes <= 0) {
            setMinutes(maxMinutes);
        }
        else {
            setMinutes(minutes - intervalMinutes);
        }
    };
    const changeSystemTime = () => {
        if (systemTime === "a.m.") {
            setSystemTime("p.m.");
        }
        else {
            setSystemTime("a.m.");
        }
    };
    (0, react_1.useEffect)(() => {
        if (hour === 0 || hour === 12) {
            setDisabledSystemT(true);
            setSystemTime("m.");
        }
        else {
            setDisabledSystemT(false);
        }
        if (minutes >= 60) {
            setMinutes(59);
        }
        if (minutes < 0) {
            setMinutes(0);
        }
        if (minutes.toString().includes("9")
            && minutes !== 59
            && intervalMinutes !== 1) {
            setMinutes(minutes + 1);
        }
    }, [hour, minutes, intervalMinutes]);
    (0, react_1.useEffect)(() => {
        if (onChange) {
            onChange(`${hour <= 9 ? `0${hour}` : hour}-${minutes <= 9 ? `0${minutes}` : minutes}-${systemTime}`);
        }
    }, [hour, minutes, onChange, systemTime]);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ "data-testid": "timePicker", className: `
        sbw-min-w-185
        sbw-rounded-md
        sbw-shadow-lg
        ${widthClass}
        ${heightClass}
        ${classNameContainerMain}
        ` }, { children: [(0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "\n            sbw-grid\n            sbw-grid-cols-3\n            sbw-justify-items-center\n            sbw-px-2\n          " }, { children: [(0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", onClick: upHour, disabled: disabled, className: "\n              sbw-mb-2\n              sbw-flex\n              sbw-h-10\n              sbw-w-10\n              sbw-items-center\n              sbw-justify-center\n              sbw-rounded-full\n              hover:sbw-border\n              hover:sbw-bg-greyscale-gray25\n            " }, { children: (0, jsx_runtime_1.jsx)(react_2.CaretUp, { size: 20, color: colorArrow, weight: "thin" }) })), (0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", onClick: upMinutes, disabled: disabled, className: "\n              sbw-mb-2\n              sbw-flex\n              sbw-h-10\n              sbw-w-10\n              sbw-items-center\n              sbw-justify-center\n              sbw-rounded-full\n              hover:sbw-border\n              hover:sbw-bg-greyscale-gray25\n            " }, { children: (0, jsx_runtime_1.jsx)(react_2.CaretUp, { size: 20, color: colorArrow, weight: "thin" }) })), (0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", onClick: changeSystemTime, disabled: disabledSystemT || disabled, className: "\n              sbw-mb-2\n              sbw-flex\n              sbw-h-10\n              sbw-w-10\n              sbw-items-center\n              sbw-justify-center\n              sbw-rounded-full\n              hover:sbw-border\n              hover:sbw-bg-greyscale-gray25\n            " }, { children: (0, jsx_runtime_1.jsx)(react_2.CaretUp, { size: 20, color: disabledSystemT || disabled ? gray100 : yankeesBlue, weight: "thin" }) }))] })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "\n          sbw-grid\n          sbw-grid-cols-3\n          sbw-items-center\n          sbw-justify-items-center\n          sbw-rounded\n          sbw-px-2\n          sbw-py-0\n        " }, { children: [(0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "\n              sbw-relative\n              sbw-w-full\n              sbw-text-center\n              sbw-text-primary-yankeesBlue\n            " }, { children: [(0, jsx_runtime_1.jsx)("span", Object.assign({ "data-testid": "hour", className: `
                sbw-w-full
                sbw-uppercase
              ${disabled
                                    ? "sbw-text-greyscale-gray100"
                                    : "sbw-text-primary-yankeesBlue"}` }, { children: hour >= 0 && hour <= 9 ? `0${hour}` : hour })), (0, jsx_runtime_1.jsx)("span", Object.assign({ id: "point", className: `
                sbw-absolute
                -sbw-top-0.125
                sbw-right-0
              ${disabled
                                    ? "sbw-text-greyscale-gray100"
                                    : "sbw-text-primary-yankeesBlue"}` }, { children: ":" }))] })), (0, jsx_runtime_1.jsx)("div", Object.assign({ className: disabled
                            ? "sbw-text-greyscale-gray100"
                            : "sbw-text-primary-yankeesBlue" }, { children: (0, jsx_runtime_1.jsx)("span", Object.assign({ "data-testid": "minutes" }, { children: minutes >= 0 && minutes <= 9 ? `0${minutes}` : minutes })) })), (0, jsx_runtime_1.jsx)("div", Object.assign({ id: "systemTimeSection", className: `sbw-uppercase
              ${disabled ? "sbw-text-greyscale-gray100" : "sbw-text-primary-yankeesBlue"}
            ` }, { children: (0, jsx_runtime_1.jsx)("span", { children: systemTime }) }))] })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "\n           sbw-grid\n           sbw-grid-cols-3\n           sbw-justify-items-center\n           sbw-px-2\n          " }, { children: [(0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", onClick: downHour, className: "\n              sbw-mt-2\n              sbw-flex\n              sbw-h-10\n              sbw-w-10\n              sbw-items-center\n              sbw-justify-center\n              sbw-rounded-full\n              hover:sbw-border\n              hover:sbw-bg-greyscale-gray25\n            ", disabled: disabled }, { children: (0, jsx_runtime_1.jsx)(react_2.CaretDown, { size: 20, color: colorArrow, weight: "thin" }) })), (0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", onClick: downMinutes, className: "\n              sbw-mt-2\n              sbw-flex\n              sbw-h-10\n              sbw-w-10\n              sbw-items-center\n              sbw-justify-center\n              sbw-rounded-full\n              hover:sbw-border\n              hover:sbw-bg-greyscale-gray25\n            ", disabled: disabled }, { children: (0, jsx_runtime_1.jsx)(react_2.CaretDown, { size: 20, color: colorArrow, weight: "thin" }) })), (0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", onClick: changeSystemTime, disabled: disabledSystemT || disabled, className: "\n              sbw-mt-2\n              sbw-flex\n              sbw-h-10\n              sbw-w-10\n              sbw-items-center\n              sbw-justify-center\n              sbw-rounded-full\n              hover:sbw-border\n              hover:sbw-bg-greyscale-gray25\n            " }, { children: (0, jsx_runtime_1.jsx)(react_2.CaretDown, { size: 20, color: disabledSystemT ? gray100 : yankeesBlue, weight: "thin" }) }))] }))] }), "timePicker"));
});
