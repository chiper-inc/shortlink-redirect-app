"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WeekPicker = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("@phosphor-icons/react");
const moment_1 = __importDefault(require("moment"));
const InputText_1 = require("../../TextFields/InputText");
/**
 * Use `WeekPicker` to select a week
 *
 * **Supported Browsers:**
 *
 * - Google Chrome 20
 * - Firefox 57
 * - Safari 14.1
 * - Edge 12
 * - Opera 11
 *
 * #### Usage:
 *
 * ```tsx
  import { ChangeEvent, useState } from "react";
  import { WeekPicker } from "@chiper-inc/sb-web-chiper";

  () => {
    const [week, setWeek] = useState<Date | string>(new Date("2022/11/30"));

    // @see momentjs
    // https://momentjs.com/docs/#/parsing/string/
    return (
      <WeekPicker
        label="Semana"
        value={week}
        setValue={setWeek}
        onChange={(e: ChangeEvent<HTMLInputElement>) => setWeek(e.target.value)}
        min={new Date("2022/11/15")} // "YYYY-MM-DD"
        max={new Date("2022/12/15")} // "YYYY-MM-DD"
        format="DD MMM, YYYY" // moment expression
        // format={{
        //   custom: `${
        //     moment(input).startOf("isoWeek").format("DD")
        //   } - ${
        //     moment(input).endOf("isoWeek").format("DD, [de] MMM")
        //   }`,
        // }}
      />
    );
  }
 * ```
 *
 * #### Demo:
 */
function WeekPicker(_a) {
    var { value, label, min = "", max = "", onChange, setValue, format = "", showPicker = false, disabled = false } = _a, rest = __rest(_a, ["value", "label", "min", "max", "onChange", "setValue", "format", "showPicker", "disabled"]);
    const ref = (0, react_1.useRef)(null);
    const INITIAL_ARROW = "sbw-text-primary-yankeesBlue";
    const DISABLED_ARROW = "sbw-text-greyscale-gray100";
    const DEFAULT_FORMAT = "YYYY-MM-DD";
    const formattedValue = (0, moment_1.default)(value).startOf("isoWeek").format(DEFAULT_FORMAT);
    return ((0, jsx_runtime_1.jsx)(InputText_1.InputText, Object.assign({}, rest, { readOnly: true, type: "text", label: label, value: format
            ? (0, moment_1.default)(value).startOf("isoWeek").format(format)
            : `${(0, moment_1.default)(value).startOf("isoWeek").format("DD")} - ${(0, moment_1.default)(value).endOf("isoWeek").format("DD [de] MMM")}`, disabled: disabled, onChange: onChange, onClick: () => {
            var _a;
            if (showPicker) {
                if ((_a = ref === null || ref === void 0 ? void 0 : ref.current) === null || _a === void 0 ? void 0 : _a.showPicker) {
                    ref.current.showPicker();
                }
            }
        }, contentBefore: ((0, jsx_runtime_1.jsx)("input", { ref: ref, required: true, type: "date", "aria-hidden": "true", min: (0, moment_1.default)(min).format(DEFAULT_FORMAT), max: (0, moment_1.default)(max).format(DEFAULT_FORMAT), value: formattedValue, onChange: onChange, className: `
            sbw-invisible
            sbw-absolute
            sbw-left-0
            sbw-top-0
            sbw-z-negative
            sbw-h-full
            sbw-w-full
            sbw-bg-transparent
            sbw-opacity-0
          ` })), contentAfter: ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-absolute sbw-right-0 sbw-top-0 sbw-flex sbw-h-full sbw-items-stretch" }, { children: [(0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", className: "sbw-px-2", disabled: (0, moment_1.default)(value).startOf("isoWeek").isSameOrBefore(min) || disabled, onClick: () => {
                        setValue((0, moment_1.default)(value).startOf("isoWeek").subtract(1, "week").format(DEFAULT_FORMAT));
                    } }, { children: (0, jsx_runtime_1.jsx)(react_2.CaretLeft, { size: 12, weight: "bold", className: (0, moment_1.default)(value).startOf("isoWeek").isSameOrBefore(min) || disabled ? DISABLED_ARROW : INITIAL_ARROW }) })), (0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", className: "sbw-px-2", disabled: (0, moment_1.default)(value).endOf("isoWeek").isSameOrAfter(max) || disabled, onClick: () => {
                        setValue((0, moment_1.default)(value).startOf("isoWeek").add(1, "week").format(DEFAULT_FORMAT));
                    } }, { children: (0, jsx_runtime_1.jsx)(react_2.CaretRight, { size: 12, weight: "bold", className: (0, moment_1.default)(value).endOf("isoWeek").isSameOrAfter(max) || disabled ? DISABLED_ARROW : INITIAL_ARROW }) }))] }))) })));
}
exports.WeekPicker = WeekPicker;
