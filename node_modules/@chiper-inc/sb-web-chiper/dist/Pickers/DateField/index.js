"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateField = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const date_fns_1 = require("date-fns");
const DatePicker_1 = require("../DatePicker");
const DropdownBox_1 = require("../../SelectFields/Dropdowns/DropdownBox");
/**
 * Use `DateField` is a field that allow to select a date or range date and
 * and preview selected dates in the chosen format
 *
 * Get information about the allowed formats in `date-fn` docs:
 * https://date-fns.org/v2.29.3/docs/format
 *
 * #### Usage:
 *
 * ```tsx
  import { useState, useCallback } from "react";
  import { DateField } from "@chiper-inc/sb-web-chiper";

  const [initRange, setInitRange] = useState<Date | undefined>(undefined);
  const [endRange, setEndRange] = useState<Date | undefined>(undefined);

  const [date, setDate] = useState<Date | undefined>(undefined);

  const handleRangeClick = useCallback((init: Date, end?: Date) => {
    setInitRange(init);
    setEndRange(end);
  }, []);

   const handleDateClick = useCallback((clickedDate: Date) => {
    setDate(clickedDate);
  }, []);

  return (
    <DateField
      hasRange
      initDate={initRange}
      endDate={endRange}
      onClick={handleRangeClick}
      formatToShow="dd/MMM/yyyy"
      placeholder="Seleccione un rango de fechas"
    />

     <DateField
      initDate={date}
      onClick={handleDateClick}
      minDate={new Date("2023/04/05")}
      maxDate={new Date("2023/04/25")}
      formatToShow="yyyy MM, dd"
      placeholder="Seleccione una fecha"
    />
  );
 * ```
 *
 * #### Demo:
 *
 */
exports.DateField = (0, react_1.memo)(({ initDate, endDate, hasRange, onClick, maxDate, minDate, placeholder, helperText, disabled, isValid = true, full, locale = "es", formatToShow = "dd/MM/yyyy", "data-testid": testID = "chiper-date-field", isReadOnly, icon = "CalendarBlank", }) => {
    const [isOpened, setIsOpened] = (0, react_1.useState)(false);
    const handleDateClick = (0, react_1.useCallback)((init, end) => {
        if (!hasRange)
            setIsOpened(false);
        onClick(init, end);
    }, [hasRange, onClick]);
    const getValueToDisplay = (init, end) => {
        if (!init)
            return "";
        const getValue = (date) => (date ? (0, date_fns_1.format)(date, formatToShow, { locale: DatePicker_1.locales[locale] }) : "");
        const endValue = ` - ${getValue(end)}`;
        return `${getValue(init)}${hasRange ? endValue : ""}`;
    };
    return ((0, jsx_runtime_1.jsx)(DropdownBox_1.DropdownBox, { placeholder: placeholder, "data-testid": testID, disabled: disabled, full: full, helperText: helperText, isValid: isValid, value: getValueToDisplay(initDate, endDate), icon: icon === "None" ? undefined : icon, isOpened: isOpened, setIsOpened: setIsOpened, isReadOnly: isReadOnly, dropdown: ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: "sbw-animate-show-calendar" }, { children: (0, jsx_runtime_1.jsx)(DatePicker_1.DatePicker, { hasRange: hasRange, initDate: initDate, endDate: endDate, onClick: handleDateClick, maxDate: maxDate, minDate: minDate, locale: locale, "data-testid": "chiper-date-field-picker" }) }))) }));
});
