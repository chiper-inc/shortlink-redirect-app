export interface IEventsQueueConfig {
    delay: number;
    onFinished?: (responses: any[]) => void;
}
export interface IPushEventQueue {
    eventName: string;
    event: Function;
    data: any;
    dispatchWhen?: (queue: IEventQueue[], event: IEventQueue) => boolean;
    onSuccess?: (response: any) => void;
    onError?: (e: any) => void;
}
export interface IEventQueue extends IPushEventQueue {
    id: string;
    dateCreated: string;
    dateDispatch: string | null;
    status: "pending" | "dispatched" | "cancelled";
}
export interface IQueue {
    events: IEventQueue[];
    push: (event: IPushEventQueue) => void;
    execNow: () => Promise<any[]>;
}
