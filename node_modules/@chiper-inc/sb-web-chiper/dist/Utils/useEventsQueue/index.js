"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const uuid_1 = require("uuid");
const ramda_1 = require("ramda");
const utils_1 = require("./utils");
const useEventsQueue = ({ delay, onFinished }) => {
    const [nextExecution, setNextExecution] = (0, react_1.useState)((0, utils_1.getNextExecution)(delay));
    const [queue, setQueue] = (0, react_1.useState)([]);
    const push = (event) => {
        const newEvent = Object.assign(Object.assign({}, event), { id: (0, uuid_1.v4)(), dateCreated: (0, utils_1.getNow)(), dateDispatch: null, status: "pending" });
        setQueue([...queue, newEvent]);
        setNextExecution((0, utils_1.getNextExecution)(delay));
    };
    const execNow = () => __awaiter(void 0, void 0, void 0, function* () {
        const eventsPool = queue.filter((eventObj) => eventObj.dispatchWhen && eventObj.dispatchWhen(queue, eventObj));
        const listTasks = eventsPool.map((eventObj) => (0, utils_1.wrapPromise)(eventObj.event, eventObj.onSuccess, eventObj.onError));
        const responses = yield Promise.all(listTasks);
        if (onFinished) {
            onFinished(responses);
        }
        return responses;
    });
    const execPool = (0, react_1.useCallback)((events) => __awaiter(void 0, void 0, void 0, function* () {
        const listTasks = events.map((eventObj) => (0, utils_1.wrapPromise)(eventObj.event, eventObj.onSuccess, eventObj.onError));
        const responses = yield Promise.all(listTasks);
        if (onFinished) {
            onFinished(responses);
        }
        return responses;
    }), [onFinished]);
    const exec = (0, react_1.useCallback)(() => {
        const eventsPool = queue.filter((eventObj) => eventObj.dispatchWhen && eventObj.dispatchWhen(queue, eventObj));
        setQueue([]);
        setNextExecution((0, utils_1.getNextExecution)(delay));
        execPool(eventsPool);
    }, [queue, delay, execPool]);
    (0, react_1.useEffect)(() => {
        const runEvery = delay < 1000 ? delay : 1000;
        const intervalId = setInterval(() => {
            if (!(0, ramda_1.isEmpty)(queue) && (0, utils_1.isBeforeNow)(nextExecution)) {
                exec();
            }
        }, runEvery);
        return () => clearInterval(intervalId);
    }, [queue, delay, nextExecution, exec]);
    return {
        events: queue,
        push,
        execNow,
    };
};
exports.default = useEventsQueue;
