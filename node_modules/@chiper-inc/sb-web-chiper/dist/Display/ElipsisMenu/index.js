"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElipsisMenu = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Icon_1 = require("../../Theme/Icon");
const Colors_1 = __importDefault(require("../../Theme/Colors"));
/**
 * ElipsisMenu is a component that allows the user to trigger different
 * actions on the elements of a table
 *
 * #### Usage:
 *
 * ```tsx
  import { ElipsisMenu } from "@chiper-inc/sb-web-chiper";
  const options = [
    {
      icon: "AddressBook",
      name: "Ver"
      onChange: () => void,
      disabled: false
    }
  ]

  <ElipsisMenu options={options}/>
 * ```
 *
 * #### Demo:
 */
exports.ElipsisMenu = (0, react_1.memo)(({ options, widthClass = "sbw-w-6", heightClass = "sbw-h-6", classNameContainerMain = "sbw-relative sbw-inline-block", classNameButtonMain = "sbw-bg-white sbw-px-2 sbw-bg-greyscale-gray25 sbw-rounded", }) => {
    const ref = (0, react_1.useRef)(null);
    const [showContent, setShowContent] = (0, react_1.useState)(false);
    function handleEscapeKey(event) {
        if (event.code === "Escape") {
            setShowContent(false);
        }
    }
    function handleClickOutside(event) {
        const currentTarget = event.target;
        if (ref.current && !ref.current.contains(currentTarget)) {
            setShowContent(false);
        }
    }
    (0, react_1.useEffect)(() => {
        document.addEventListener("keydown", handleEscapeKey);
        document.addEventListener("mousedown", handleClickOutside);
        return () => {
            document.removeEventListener("keydown", handleEscapeKey);
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, []);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ "data-testid": "elipsis-menu", ref: ref, className: classNameContainerMain }, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ className: "sbw-flex sbw-w-full sbw-justify-end" }, { children: (0, jsx_runtime_1.jsx)("button", Object.assign({ "data-testid": "elipsis-menu-button", type: "button", onClick: () => setShowContent(!showContent), className: `
            ${widthClass} 
            ${heightClass} 
            ${classNameButtonMain} 
            sbw-flex 
            sbw-items-center 
            sbw-justify-center` }, { children: (0, jsx_runtime_1.jsx)("i", Object.assign({ role: "presentation", "data-testid": "alert-icon" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "DotsThreeVertical", size: 20 }) })) }), "elipsis-menu-button") })), showContent && ((0, jsx_runtime_1.jsx)("div", Object.assign({ "data-testid": "elipsis-content", className: "\n              sbw-absolute\n              sbw-z-10\n              sbw-flex\n              sbw-w-172\n              sbw-flex-col sbw-rounded-md\n              sbw-bg-white\n              sbw-px-4\n              sbw-py-3\n              sbw-shadow-lg" }, { children: options.map((option) => ((0, jsx_runtime_1.jsxs)("button", Object.assign({ type: "button", "data-testid": "elipsis-menu-button", onClick: option.onChange, className: `sbw-flex sbw-w-full sbw-items-center sbw-py-1 ${(option === null || option === void 0 ? void 0 : option.disabled)
                        ? "sbw-text-greyscale-gray25"
                        : "sbw-text-primary-yankeesBlue"}`, disabled: option === null || option === void 0 ? void 0 : option.disabled }, { children: [(0, jsx_runtime_1.jsx)("i", Object.assign({ role: "presentation", "data-testid": "alert-icon", className: "sbw-mr-10.25" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: option.icon, size: 20, weight: "thin", color: (option === null || option === void 0 ? void 0 : option.disabled)
                                    ? Colors_1.default.greyscale.gray25
                                    : Colors_1.default.primary.yankeesBlue }) })), option.name] }), option.name))) })))] }), "elipsis-menu"));
});
