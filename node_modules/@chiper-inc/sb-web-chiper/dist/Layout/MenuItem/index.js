"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuItem = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Icon_1 = require("../../Theme/Icon");
const Colors_1 = __importDefault(require("../../Theme/Colors"));
const ItemCollapse_1 = __importDefault(require("./ItemCollapse"));
/**
 * The `MenuItem` is a reusable React component that represents
 * a single item in a menu. It can be used in a variety of contexts,
 * from navigation menus to dropdown menus. Overall, the `MenuItem`
 * is a useful building block for creating menus in a React application.
 *
 * #### Usage:
 *
 * ```tsx
  import { MenuItem } from "@chiper-inc/sb-web-chiper";

  const item = {
    title: "Link 1",
    icon: "AirplaneLanding",
    goToRoute: () => {},
    childrenDataItemMenu: [
      {
        title: "Link 1 Child",
        goToRouteChildren: () => {},
      },
    ],
  }

  <MenuItem
    setModeExpansible={() => setMode(!mode)}
    title={item.title}
    icon={item.icon}
    goToRoute={item.goToRoute}
    childrenDataItemMenu={item.childrenDataItemMenu}
    classNameMainA="sbw-mt-4"
  />
 * ```
 *
 * #### Demo:
 */
function MenuItem({ modeExpansible, setModeExpansible, title, icon = "None", goToRoute, childrenDataItemMenu = [], classNameMainA = "", active = false, mlSpan = "sbw-ml-30%", leftAfterSpan = "after:sbw-left-n4px", }) {
    const [showTooltip, setShowTooltip] = (0, react_1.useState)(false);
    const [collapsive, setCollapsive] = (0, react_1.useState)(false);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ "data-testid": "component-menu-item", onMouseLeave: () => {
            setCollapsive(false);
        }, className: `${classNameMainA}` }, { children: [(0, jsx_runtime_1.jsxs)("div", Object.assign({ "data-testid": "component-menu-item-content-secondary", onMouseEnter: () => {
                    setShowTooltip(true);
                }, onMouseLeave: () => {
                    setShowTooltip(false);
                }, className: `
          ${modeExpansible ? "" : "sbw-w-[20px] sbw-justify-center"}
          ${active
                    ? `sbw-border-l-2
                 sbw-border-primary-chiperBrandRed
                 sbw-bg-greyscale-gray25
                 sbw-text-primary-chiperBrandRed`
                    : ""}
          sbw-group
          sbw-flex
          sbw-h-12
          sbw-w-full
          sbw-min-w-17
          sbw-items-center
          sbw-overflow-hidden
          sbw-text-ellipsis
          sbw-whitespace-nowrap
          sbw-py-4
          sbw-px-6
          sbw-text-base
          sbw-text-primary-darkBlueGray
          sbw-transition
          sbw-duration-300
          sbw-ease-in-out
          hover:sbw-bg-greyscale-gray5
        ` }, { children: [icon && icon !== "None" && ((0, jsx_runtime_1.jsx)("i", Object.assign({ role: "presentation", "data-testid": "button-icon", className: `${modeExpansible ? "sbw-mr-3" : ""} sbw-cursor-pointer`, onClick: () => (childrenDataItemMenu.length <= 0 && goToRoute
                            ? goToRoute()
                            : setModeExpansible(!modeExpansible)) }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: icon, color: active
                                ? Colors_1.default.primary.chiperBrandRed
                                : Colors_1.default.primary.darkBlueGray, size: 18 }) }))), (0, jsx_runtime_1.jsx)("span", Object.assign({ "data-testid": "span-tooltip", className: `${showTooltip && modeExpansible === false
                            ? "sbw-visible"
                            : "sbw-invisible"}
          ${active ? "sbw-text-white" : ""}
          ${mlSpan}
            sbw-absolute
            sbw-left-2.875
            sbw-z-10
            sbw-rounded-md
            sbw-bg-primary-chiperBrandRed
            sbw-p-2
            sbw-text-primary-white
            after:sbw-absolute
            after:sbw-top-38%
            after:sbw-content-[""]
            ${leftAfterSpan}
            after:sbw-rotate-45
            after:sbw-border-5
            after:sbw-border-solid
            after:sbw-border-b-primary-chiperBrandRed
            after:sbw-border-l-primary-chiperBrandRed
            after:sbw-border-t-transparent
            after:sbw-border-r-transparent
            after:sbw-content-['']
          ` }, { children: title })), !!modeExpansible && ((0, jsx_runtime_1.jsxs)("div", Object.assign({ "data-testid": "component-menu-item-text-link-main", className: "sbw-flex sbw-w-full sbw-items-center sbw-justify-between" }, { children: [(0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", onClick: () => {
                                    setModeExpansible(!modeExpansible);
                                    if (goToRoute) {
                                        goToRoute();
                                    }
                                    else {
                                        setCollapsive(!collapsive);
                                    }
                                } }, { children: (0, jsx_runtime_1.jsx)("p", Object.assign({ className: "sbw-pt-0.188" }, { children: title })) })), childrenDataItemMenu.length >= 1 ? ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", onClick: () => setCollapsive(!collapsive), "data-testid": "component-menu-item-button-arrow-collapsive" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: collapsive ? "CaretUp" : "CaretDown", color: Colors_1.default.primary.darkBlueGray, size: 18 }) }))) : null] })))] })), modeExpansible && collapsive && ((0, jsx_runtime_1.jsx)(ItemCollapse_1.default, { childrenDataItemMenu: childrenDataItemMenu }))] })));
}
exports.MenuItem = MenuItem;
