"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TabList = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
/**
 * A `TabList` renders a list of tab items with optional dragging functionality.
 * It takes in several props including `TabItem`, which is the child element to
 * render as tab items, `className`, which is the additional CSS class to apply
 * to the component, `justify`, which is a boolean value that determines whether
 * to justify the tab items evenly or center them, `itemWidth`, which is the fixed
 * width of each tab item, and `testID`, which is the ID to use for the test element.
 *
 * It accepts the `to` prop to change the route of a page, but it can also be used
 * with the `tabpanel` role to simply display content on click without changing routes.
 *
 * #### Usage:
 *
 * ```tsx
  import { TabList, TabItem } from "@chiper-inc/sb-web-chiper";

  <TabList
    justify={false}
    className="sbw-bg-white sbw-shadow-bottom"
    itemWidth={100}
  >
    <TabItem
      title="Item 1"
      to="my-route1"
      onClick={(e) => e.preventDefault()}
      selected
      actived
    />
    <TabItem
      title="Item 2"
      to="my-route2"
      onClick={(e) => e.preventDefault()}
      selected={false}
      actived
    />
  </TabList>
 * ```
 *
 * #### Usage with `tabpanel`:
 *
 * ```tsx
  import { TabList, TabItem } from "@chiper-inc/sb-web-chiper";
  const [tabSelected, setTabSelected] = useState("");

  <TabList className="sbw-bg-white">
    <TabItem
      actived
      key={uuidv4()}
      title={title}
      iconName={iconName}
      id={`tab-${id}`}
      to={`#panel-${id}`}
      aria-controls={`panel-${id}`}
      selected={tabSelected === id}
      onClick={(e) => {
        e.preventDefault();
        setTabSelected(id);
      }}
    />
  </TabList>
  <div
    role="tabpanel"
    id={`panel-${id}`}
    aria-labelledby={`tab-${id}`}
    className={tabSelected === id ? "sbw-block" : "sbw-hidden"}
  >
    <Typography variant="h2">
      {title}
    </Typography>
    <Typography variant="body">
      Lorem ipsum dolor sit amet consectetur, adipisicing elit.
    </Typography>
  </div>
 * ```
 *
 * #### Demo:
 */
function TabList({ children, className = "", justify = true, itemWidth = null, "data-testid": testID = "tab-menu", }) {
    const [startAxis, setStartAxis] = (0, react_1.useState)(0);
    const [scrollLeft, setScrollLeft] = (0, react_1.useState)(0);
    const [isDragging, setIsDragging] = (0, react_1.useState)(false);
    const containerRef = (0, react_1.useRef)(null);
    const handleMouseDown = (event) => {
        setIsDragging(true);
        setStartAxis(event.pageX - containerRef.current.offsetLeft);
        setScrollLeft(containerRef.current.scrollLeft);
    };
    const handleMouseMove = (event) => {
        if (!isDragging)
            return;
        event.preventDefault();
        const axis = event.pageX - containerRef.current.offsetLeft;
        const swipe = (axis - startAxis) * 1.5;
        containerRef.current.scrollLeft = scrollLeft - swipe;
    };
    const handleMouseUp = () => {
        setIsDragging(false);
    };
    const childrenWithProps = react_1.Children.map(children, (child) => ((0, react_1.cloneElement)(child, {
        style: {
            minWidth: itemWidth ? `${itemWidth}px` : "auto",
        },
    })));
    return ((0, jsx_runtime_1.jsx)("nav", Object.assign({ className: `
        sbw-mx-auto
        sbw-flex
        sbw-w-full
        sbw-items-center
        sbw-justify-center
        ${className}
      ` }, { children: (0, jsx_runtime_1.jsx)("ul", Object.assign({ ref: containerRef, "data-testid": testID, role: "tablist", onMouseDown: handleMouseDown, onMouseMove: handleMouseMove, onMouseUp: handleMouseUp, onMouseLeave: handleMouseUp, style: {
                gridTemplateColumns: itemWidth ? `repeat(auto-fit, minmax(${itemWidth}px, 1fr))` : "",
            }, className: `
          no-scrollbar
          sbw-overflow-x-auto
          ${justify
                ? "sbw-grid sbw-w-full sbw-grid-flow-col sbw-items-center"
                : "sbw-flex sbw-items-center sbw-justify-center"}
        ` }, { children: childrenWithProps })) })));
}
exports.TabList = TabList;
