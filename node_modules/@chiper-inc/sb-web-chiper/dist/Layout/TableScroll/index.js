"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableScroll = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const uuid_1 = require("uuid");
const react_1 = require("react");
const react_infinite_scroll_component_1 = __importDefault(require("react-infinite-scroll-component"));
const Table_1 = require("../Table");
const Icon_1 = require("../../Theme/Icon");
const table_1 = require("../Table/table");
/**
 * Use `TableScroll` as an HTML table and send required props.
 * Put the scroll bar always on the bottom.
 *
 * Used with [InfinityScroll](https://www.npmjs.com/package/react-infinite-scroll-component)
 *
 *
 * #### Usage:
 *
 * ```tsx
  import { TableScroll } from "@chiper-inc/sb-web-chiper";

  const dataColumns = [
    { title: "Dia",  key: "day" },
    { title: "Estimado",  key: "estimated" },
    { title: "Por asignar", key: "assign" },
  ];

  const dataRow = [
    {
      day: "Lunes",
      estimated: 20,
      assign: "Completo",
    },
    {
      day: "Martes",
      estimated: 16,
      assign: "Completo",
    },
  ];

  const [hasMore, setHasMore] = useState(true);
  const [items, setItems] = useState(dataRow);
  const data = useMemo(() => items, [items]);

  const fetchMore = () => {
    if (data.length >= 1) {
      setHasMore(false);
      return;
    }
    setTimeout(() => {
      setItems(items.concat(dataRow[0]));
    }, 500);
  };

  return (
    <TableScroll
      hasMore={hasMore}
      fetchMore={fetchMore}
      columns={dataColumns}
      rows={data}
    />
  );
 * ```
 *
 * #### Demo:
 */
function TableScroll({ columns, rows, loader, scrollableTarget = "scrollableDiv", endMessage, hasMore = false, fetchMore = () => { }, newStyle, heightTable, }) {
    const [dataRows, setDataRows] = (0, react_1.useState)(rows);
    const [orderedRows, setorderedRows] = (0, react_1.useState)(rows);
    const [order, setOrder] = (0, react_1.useState)();
    const [selectedKey, setselectedKey] = (0, react_1.useState)("");
    (0, react_1.useEffect)(() => {
        setDataRows(rows);
        setorderedRows(false);
    }, [rows, dataRows]);
    const sortBy = (key) => {
        if (!order || order === "DES") {
            const sortedRows = dataRows.sort(({ [key]: a }, { [key]: b }) => b - a);
            const areNumber = dataRows.every((item) => typeof item[key] === "number");
            if (areNumber) {
                setselectedKey(key);
                setorderedRows(sortedRows);
                setOrder("ASC");
            }
        }
        if (order === "ASC") {
            const sortedRows = dataRows.sort(({ [key]: a }, { [key]: b }) => a - b);
            const areNumber = dataRows.every((item) => typeof item[key] === "number");
            if (areNumber) {
                setselectedKey(key);
                setOrder("DES");
                setorderedRows(sortedRows);
            }
        }
    };
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ id: scrollableTarget, style: {
            height: heightTable,
            overflowY: "auto",
        } }, { children: (0, jsx_runtime_1.jsx)(react_infinite_scroll_component_1.default, Object.assign({ dataLength: dataRows.length, next: fetchMore, loader: loader, hasMore: hasMore, scrollableTarget: scrollableTarget, endMessage: endMessage }, { children: (0, jsx_runtime_1.jsxs)(table_1.Table, { children: [(0, jsx_runtime_1.jsx)(Table_1.Thead, Object.assign({ className: newStyle
                            ? "sbw-bg-primary-darkBlueGray sbw-text-white" : "" }, { children: (0, jsx_runtime_1.jsx)(Table_1.Tr, { children: columns.map((item) => ((0, jsx_runtime_1.jsx)(Table_1.Th, { children: (0, jsx_runtime_1.jsx)("button", Object.assign({ onClick: () => item.sorteable && sortBy(item.key), type: "button" }, { children: (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: `sbw-flex sbw-items-center  ${newStyle ? " sbw-text-white" : " sbw-text-black"}` }, { children: [item.title, item.sorteable && order && item.key === selectedKey && ((0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: order === "DES" ? "ArrowDown" : "ArrowUp", size: 16 }))] })) })) }, (0, uuid_1.v4)()))) }, (0, uuid_1.v4)()) })), (0, jsx_runtime_1.jsx)(Table_1.Tbody, Object.assign({ className: newStyle ? " sbw-divide-y" : "" }, { children: orderedRows
                            ? orderedRows.map((item) => ((0, jsx_runtime_1.jsx)(Table_1.Tr, { children: Object.values(item).map((val) => ((0, jsx_runtime_1.jsx)(Table_1.Td, { children: val }, (0, uuid_1.v4)()))) }, (0, uuid_1.v4)())))
                            : dataRows.map((item) => ((0, jsx_runtime_1.jsx)(Table_1.Tr, { children: Object.values(item).map((val) => ((0, jsx_runtime_1.jsx)(Table_1.Td, { children: val }, (0, uuid_1.v4)()))) }, (0, uuid_1.v4)()))) }))] }) })) })));
}
exports.TableScroll = TableScroll;
