"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Frequency = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const Colors_1 = __importDefault(require("../../Theme/Colors"));
const props_1 = require("./props");
/**
 * `Frequency` is an interactive element that allows you to select the days of the week
 *
 * #### Usage:
 *
 * ```tsx
  import { Frequency } from "@chiper-inc/sb-web-chiper";

  <Frequency text="L" />
 * ```
 *
 * #### Demo:
 */
function Frequency(_a) {
    var { text, size = "medium", selected = false, disabled = true, onClick = () => { }, className = "" } = _a, rest = __rest(_a, ["text", "size", "selected", "disabled", "onClick", "className"]);
    return ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", disabled: disabled, onClick: onClick, className: `
        ${props_1.sizes[size]}
        ${size === "small" ? "sbw-text-[10px]" : "sbw-text-sm"}
        sbw-inline-flex
        sbw-items-center
        sbw-justify-center
        sbw-overflow-hidden
        sbw-whitespace-nowrap
        sbw-rounded-full
        sbw-border
        sbw-border-transparent
        sbw-p-1
        sbw-text-center
        sbw-font-sans
        sbw-leading-none
        ${className}
      `, style: {
            color: Colors_1.default.primary.darkBlueGray,
            background: selected ? Colors_1.default.greyscale.gray60 : "transparent",
            borderColor: selected ? "transparent" : Colors_1.default.greyscale.gray60,
        } }, rest, { children: text })));
}
exports.Frequency = Frequency;
