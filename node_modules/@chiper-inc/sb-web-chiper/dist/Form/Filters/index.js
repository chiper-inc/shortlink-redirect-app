"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Filters = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Icon_1 = require("../../Theme/Icon");
const props_1 = require("./props");
/**
 * The `Filters` is a reusable component that provides
 * a filter button with an associated dropdown menu.
 * It allows users to apply filters to a specific
 * set of data or content.
 *
 * #### Usage:
 *
 * ```tsx
  import { Filters, SelectorGroup, SelectorItem } from "@chiper-inc/sb-web-chiper";

  const [status, setStatus] = useState("");

  <Filters
    label="Filters"
    size="medium"
    actived={!!status}
    disabled={false}
  >
    <div className="absolute top-full w-80 shadow-sm">
      <SelectorGroup groupName="Status">
        <SelectorItem
          name="status"
          label="Pending"
          value="1"
          type="radio"
          checked={status === "1"}
          onChange={(event) => setStatus(event.target.value)}
          onClick={() => setStatus("")}
        />
        <SelectorItem
          name="status"
          label="Active"
          value="2"
          type="radio"
          checked={status === "2"}
          onChange={(event) => setStatus(event.target.value)}
          onClick={() => setStatus("")}
        />
      </SelectorGroup>
    </div>
  </Filters>
 * ```
 *
 * #### Demo:
 */
function Filters(_a) {
    var { label, children, className, size = "medium", disabled = false, actived = false } = _a, rest = __rest(_a, ["label", "children", "className", "size", "disabled", "actived"]);
    const [isOpen, setIsOpen] = (0, react_1.useState)(false);
    const ref = (0, react_1.useRef)(null);
    function handleEscapeKey(event) {
        if (event.code === "Escape") {
            setIsOpen(false);
        }
    }
    function handleClickOutside(event) {
        const currentTarget = event.target;
        if (ref.current && !ref.current.contains(currentTarget)) {
            setIsOpen(false);
        }
    }
    (0, react_1.useEffect)(() => {
        document.addEventListener("keydown", handleEscapeKey);
        document.addEventListener("mousedown", handleClickOutside);
        return () => {
            document.removeEventListener("keydown", handleEscapeKey);
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, []);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({}, rest, { ref: ref, className: `
        sbw-relative
        ${className}
      ` }, { children: [(0, jsx_runtime_1.jsxs)("button", Object.assign({ type: "button", onClick: () => setIsOpen(!isOpen), disabled: disabled, className: `
          sbw-group
          sbw-flex
          sbw-cursor-pointer
          sbw-items-center
          sbw-gap-2
          sbw-rounded
          sbw-border
          sbw-border-greyscale-gray60
          sbw-px-4
          hover:sbw-bg-greyscale-gray5
          focus-visible:sbw-outline
          focus-visible:sbw-outline-2
          focus-visible:-sbw-outline-offset-2
          focus-visible:sbw-outline-secondary-brightYellow
          disabled:sbw-cursor-not-allowed
          disabled:sbw-bg-greyscale-gray25
          ${props_1.filtersSizesStyles[size].button}
        ` }, { children: [(0, jsx_runtime_1.jsxs)("span", Object.assign({ className: "\n            sbw-relative\n            sbw-text-primary-yankeesBlue\n            group-disabled:sbw-text-greyscale-gray200\n          " }, { children: [(0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "FunnelSimple", size: props_1.filtersSizesStyles[size].icon }), actived && ((0, jsx_runtime_1.jsx)("span", { className: `
                sbw-absolute
                sbw-top-0
                sbw-right-0
                sbw-h-2
                sbw-w-2
                sbw-rounded-full
                sbw-border
                sbw-border-white
                sbw-bg-primary-chiperBrandRed
              ` }))] })), label && ((0, jsx_runtime_1.jsx)("span", Object.assign({ className: `
              sbw-text-primary-yankeesBlue
              group-disabled:sbw-text-greyscale-gray200
              ${props_1.filtersSizesStyles[size].text}
            ` }, { children: label })))] })), isOpen && children] })));
}
exports.Filters = Filters;
