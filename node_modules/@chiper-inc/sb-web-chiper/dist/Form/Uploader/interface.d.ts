import { Dispatch, HTMLAttributes, SetStateAction } from "react";
import { PhosphorIcons } from "../../Theme/Icon";
export interface IFileData {
    name: string;
    size: number;
    type: string;
    previewImage?: string | boolean;
}
export type ResponseStatus = "idle" | "uploading" | "success" | "error";
export interface IFileItem {
    title: string;
    error?: string;
    message?: string;
    progress?: number;
    status?: ResponseStatus;
    setError: Dispatch<SetStateAction<string>>;
    deleteItem: (s?: string) => void;
    loadingMessage: string;
    previewImage?: string | boolean;
}
export interface IUploader extends HTMLAttributes<HTMLDivElement> {
    /** Title of the input file upload */
    title: string;
    /** Description of the file upload */
    description: string;
    /** Set error message on invalid types */
    typesErrorMessage: string;
    /** Set limit size message on error */
    limitErrorMessage: string;
    /**
     * The desired aspect ratio (width/height) for resized
     * images, which becomes the minimum size allowed and
     * restricts images to that exact ratio.
     */
    aspectRatio?: {
        width: number;
        height: number;
    };
    /** Phosphor name icon */
    iconName?: keyof typeof PhosphorIcons;
    /** Function that gets called when the user selects a file */
    onHandleChange?: (files: File) => void;
    /** Function that delete or reset uploaded files */
    onHandleDelete?: (name: string) => void;
    /** Allow multiple file selection */
    multiple?: boolean;
    /** Disable the component */
    disabled?: boolean;
    /** Set or retrieve a comma-separated list of content types */
    accept?: HTMLInputElement["accept"];
    /** Response status of the upload */
    responseStatus?: ResponseStatus;
    /** Set error message on upload error */
    responseErrorMessage?: string;
    /** Send percentage of the upload progress */
    progress?: number;
    /** Set progress message on file upload */
    progressMessage?: string;
    /** Maximum file size (in bytes) */
    max?: number;
    loadingMessage: string;
    imageThumbnail?: string;
    subtitle?: string;
}
