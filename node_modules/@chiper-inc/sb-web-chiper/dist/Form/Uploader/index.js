"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Uploader = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Icon_1 = require("../../Theme/Icon");
const Colors_1 = __importDefault(require("../../Theme/Colors"));
const formatSize_1 = require("../../Utils/formatSize");
const FileItem_1 = require("./FileItem");
const DEFAULT_MAX_1MB = 2 * 1024 * 1024;
const aspectCalc = (width, height) => Math.round((width / height) * 100) / 100;
/**
 * Allows users to upload one or multiple files at once.
 * This wrapper opens a native upload dialog box when the user clicks a trigger.
 * Drag and drop option is also available and shows the progress of
 * the upload and provides feedback on the upload status.
 *
 * #### Best practices
 * - Always keep the file name visible
 * - Provide information about file type, size, and upload speed or progress when possible.
 *
 * #### Usage simple example:
 *
 * ```tsx
  import { Uploader } from "@chiper-inc/sb-web-chiper";

  <Uploader
    title="Arrastra y suelta o busca tus archivos"
    description="Archivos en formato JPG, PNG o PDF."
    accept=".jpg, .jpeg, .png, .pdf"
    limitErrorMessage="El límite permite el máximo es 2 MB."
    typesErrorMessage="Tipo de archivo invalido. Solo es permitido: JPG, PNG o PDF."
  />
 * ```
 *
 * #### Usage example with axios:
 *
 * ```tsx
  import { useState } from "react";
  import axios from "axios";
  import { Uploader } from "@chiper-inc/sb-web-chiper";
  import { ResponseStatus } from 'sb-web-chiper/dist/Form/Uploader/interface'

  const [progress, setProgress] = useState<number>(0);
  const [responseStatus, setResponseStatus] = useState<ResponseStatus>("idle");
  const [responseErrorMessage, setResponseErrorMessage] = useState("");
  const [image, setImage] = useState<string>("");

  const resetSetStates = () => {
    setProgress(0);
    setResponseStatus("uploading");
    setResponseErrorMessage("");
    setImage("");
  };

  const postImage = async (file: File) => {
    resetSetStates();

    setImage(URL.createObjectURL(file));

    try {
      setResponseStatus("uploading");
      const formData = new FormData();
      formData.append("file", file);

      await axios.post("https://ej2.syncfusion.com/services/api/uploadbox/Save", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
        onUploadProgress: (progressEvent) => {
          const checkProgressEvent = progressEvent?.total || 0;
          const percentCompleted = Math.round((progressEvent.loaded * 100) / checkProgressEvent);
          setProgress(percentCompleted);
        },
      });
      setResponseStatus("success");
    } catch (error) {
      setResponseStatus("error");
      setResponseErrorMessage("Error saving file. Try again!");
    }
  };

  <Uploader
    title="Drag and drop or search for your files"
    description="Files in JPG or PNG format. 397 x 299 (WxH) - Size Max 300 KB"
    accept=".jpg, .jpeg, .png"
    aspectRatio={{ width: 397, height: 299 }}
    max={2 * 1024 * 1024}
    onHandleChange={postImageUpload}
    onHandleDelete={resetSetStates}
    progress={progress > 0 && progress <= 100 ? progress : undefined}
    progressMessage={progress > 0 && progress <= 100 ? `${progress}%` : ""}
    responseStatus={responseStatus}
    responseErrorMessage={responseErrorMessage}
    limitErrorMessage="Size limit 2 MB."
    typesErrorMessage="Files JPG or PNG only."
  />
 * ```
 *
 * #### Demo:
*/
function Uploader(_a) {
    var { title, description, disabled, typesErrorMessage, limitErrorMessage, onHandleChange, onHandleDelete, aspectRatio, iconName = "Image", multiple = false, responseStatus = "idle", responseErrorMessage = "", progress = undefined, progressMessage = "", accept = "", max = DEFAULT_MAX_1MB, className = "", loadingMessage, imageThumbnail, subtitle } = _a, rest = __rest(_a, ["title", "description", "disabled", "typesErrorMessage", "limitErrorMessage", "onHandleChange", "onHandleDelete", "aspectRatio", "iconName", "multiple", "responseStatus", "responseErrorMessage", "progress", "progressMessage", "accept", "max", "className", "loadingMessage", "imageThumbnail", "subtitle"]);
    const inputRef = (0, react_1.useRef)(null);
    const [files, setFiles] = (0, react_1.useState)([]);
    const [error, setError] = (0, react_1.useState)("");
    const [dragActive, setDragActive] = (0, react_1.useState)(false);
    const STROKE = `data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' stroke='${encodeURIComponent(error ? Colors_1.default.primary.chiperBrandRed : Colors_1.default.greyscale.gray60)}' stroke-width='2' stroke-dasharray='6%2c 14' stroke-dashoffset='0' stroke-linecap='square'/%3e%3c/svg%3e`;
    const [firstWord, ...restOfSentence] = title.split(" ");
    const onHandleDrag = (event) => {
        setDragActive(false);
        if (!disabled) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (event.type === "dragenter" || event.type === "dragover") {
            setDragActive(true);
        }
        else if (event.type === "dragleave") {
            setDragActive(false);
        }
    };
    const onLoadFile = (file, event) => {
        const fileInput = event.target;
        const reader = new FileReader();
        if (onHandleChange)
            onHandleChange(file);
        if (!file.type.includes("image") && onHandleChange) {
            onHandleChange(file);
            return;
        }
        reader.readAsDataURL(file);
        reader.onload = () => {
            const image = new window.Image();
            image.src = reader.result;
            image.onload = () => {
                if (!(aspectRatio === null || aspectRatio === void 0 ? void 0 : aspectRatio.width) && !(aspectRatio === null || aspectRatio === void 0 ? void 0 : aspectRatio.height)) {
                    fileInput.value = "";
                    return;
                }
                const currentImageAspect = aspectCalc(image.width, image.height);
                const allowImageAspect = aspectCalc(aspectRatio.width, aspectRatio.height);
                if (currentImageAspect !== allowImageAspect
                    || image.width < aspectRatio.width
                    || image.height < aspectRatio.height) {
                    setFiles([]);
                    setError(`Image dimensions must be ${aspectRatio.width}x${aspectRatio.height}`);
                    fileInput.value = "";
                    return;
                }
                const canvas = document.createElement("canvas");
                canvas.width = aspectRatio.width;
                canvas.height = aspectRatio.height;
                const canvasContext = canvas.getContext("2d");
                canvasContext.drawImage(image, 0, 0, canvas.width, canvas.height);
                canvas.toBlob((blob) => {
                    if (blob) {
                        const resizeFile = new File([blob], file.name, { type: file.type });
                        if (onHandleChange) {
                            onHandleChange(resizeFile);
                        }
                        fileInput.value = "";
                    }
                }, file.type, 1);
            };
        };
    };
    const clearStates = (name) => {
        const filtered = files.filter((file) => file.name !== name);
        setFiles(filtered);
    };
    const onHandleUpload = (event) => {
        var _a;
        const fileInput = event.target;
        const dragedFile = event.target.files && event.target.files[0];
        if (!dragedFile) {
            return;
        }
        const extension = `.${dragedFile.name.split(".").pop()}`;
        const acceptTypes = accept.replaceAll(" ", "").split(",").includes(extension);
        if (accept && !acceptTypes) {
            setDragActive(false);
            setError(typesErrorMessage);
            fileInput.value = "";
            return;
        }
        if (dragedFile.size > max) {
            setError(limitErrorMessage);
            fileInput.value = "";
            return;
        }
        const dropFiles = ((_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.files) || [];
        const filesList = Array.from(dropFiles).map((file) => {
            const { name, size, type } = file;
            return ({
                name,
                size,
                type,
                previewImage: type === "image/png" && URL.createObjectURL(file),
            });
        });
        setDragActive(false);
        if (multiple) {
            setFiles((prevFiles) => [...prevFiles, ...filesList]);
        }
        else {
            setFiles(filesList);
        }
        onLoadFile(dragedFile, event);
    };
    (0, react_1.useLayoutEffect)(() => {
        if (responseErrorMessage) {
            setError(responseErrorMessage);
        }
    }, [responseErrorMessage]);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: `sbw-group sbw-container ${className}` }, rest, { children: [(0, jsx_runtime_1.jsxs)("div", Object.assign({ className: `
          ${dragActive || disabled ? "sbw-bg-greyscale-gray5" : "sbw-bg-primary-white"}
          sbw-relative
          sbw-flex
          sbw-w-full
          sbw-items-center
          sbw-justify-center
          sbw-py-10
        `, style: {
                    backgroundImage: `url("${STROKE}")`,
                } }, { children: [(0, jsx_runtime_1.jsx)("input", { type: "file", ref: inputRef, "data-testid": "fileInput", accept: accept.replaceAll(" ", ""), disabled: disabled, max: max, onChange: onHandleUpload, onDragEnter: onHandleDrag, onDragLeave: onHandleDrag, multiple: multiple, className: `
                ${disabled ? "sbw-cursor-no-drop" : "sbw-cursor-pointer"}
                sbw-absolute
                sbw-left-0
                sbw-top-0
                sbw-h-full
                sbw-w-full
                sbw-opacity-0
              ` }), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-flex sbw-flex-wrap sbw-items-center sbw-justify-center" }, { children: [imageThumbnail ? ((0, jsx_runtime_1.jsx)("img", { src: imageThumbnail, alt: "" }))
                                : ((0, jsx_runtime_1.jsx)("figure", Object.assign({ className: `
                  ${error ? "sbw-bg-primary-chiperBrandRed sbw-bg-opacity-20" : "sbw-bg-greyscale-gray25"}
                  sbw-mb-5
                  sbw-flex
                  sbw-h-17
                  sbw-w-17
                  sbw-items-center
                  sbw-justify-center
                   sbw-rounded
                ` }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: iconName, weight: "fill", size: 40, color: error ? Colors_1.default.primary.chiperBrandRed : Colors_1.default.primary.yankeesBlue }) }))), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-mb-5 sbw-w-full sbw-text-center" }, { children: [(0, jsx_runtime_1.jsxs)("strong", Object.assign({ className: "sbw-text-base " }, { children: [(0, jsx_runtime_1.jsx)("span", Object.assign({ className: "sbw-text-primary-green sbw-underline" }, { children: firstWord })), (0, jsx_runtime_1.jsxs)("span", Object.assign({ className: "sbw-text-primary-yankeesBlue" }, { children: [" ", restOfSentence.join(" ")] }))] })), (0, jsx_runtime_1.jsx)("p", Object.assign({ className: "sbw-my-2 sbw-text-xs  sbw-text-primary-darkBlueGray" }, { children: description })), (0, jsx_runtime_1.jsx)("p", Object.assign({ className: "sbw-text-xs  sbw-text-primary-darkBlueGray" }, { children: subtitle }))] }))] }))] })), (error) && ((0, jsx_runtime_1.jsx)(FileItem_1.FileItem, { loadingMessage: loadingMessage, deleteItem: clearStates, setError: setError, title: error, error: error })), ((files && files.length > 0)) && ((0, jsx_runtime_1.jsx)("ul", Object.assign({ "data-testid": "fileUploadList" }, { children: files.map((item) => ((0, jsx_runtime_1.jsx)("li", { children: (0, jsx_runtime_1.jsx)(FileItem_1.FileItem, { previewImage: item.previewImage, loadingMessage: loadingMessage, deleteItem: () => clearStates(item.name), setError: setError, title: `${item.name} - ${(0, formatSize_1.formatSize)(item.size)}`, message: progressMessage, progress: progress, status: responseStatus }) }, item.name))) })))] })));
}
exports.Uploader = Uploader;
