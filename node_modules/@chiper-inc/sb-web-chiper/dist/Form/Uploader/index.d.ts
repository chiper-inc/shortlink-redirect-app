import { IUploader } from "./interface";
/**
 * Allows users to upload one or multiple files at once.
 * This wrapper opens a native upload dialog box when the user clicks a trigger.
 * Drag and drop option is also available and shows the progress of
 * the upload and provides feedback on the upload status.
 *
 * #### Best practices
 * - Always keep the file name visible
 * - Provide information about file type, size, and upload speed or progress when possible.
 *
 * #### Usage simple example:
 *
 * ```tsx
  import { Uploader } from "@chiper-inc/sb-web-chiper";

  <Uploader
    title="Arrastra y suelta o busca tus archivos"
    description="Archivos en formato JPG, PNG o PDF."
    accept=".jpg, .jpeg, .png, .pdf"
    limitErrorMessage="El límite permite el máximo es 2 MB."
    typesErrorMessage="Tipo de archivo invalido. Solo es permitido: JPG, PNG o PDF."
  />
 * ```
 *
 * #### Usage example with axios:
 *
 * ```tsx
  import { useState } from "react";
  import axios from "axios";
  import { Uploader } from "@chiper-inc/sb-web-chiper";
  import { ResponseStatus } from 'sb-web-chiper/dist/Form/Uploader/interface'

  const [progress, setProgress] = useState<number>(0);
  const [responseStatus, setResponseStatus] = useState<ResponseStatus>("idle");
  const [responseErrorMessage, setResponseErrorMessage] = useState("");
  const [image, setImage] = useState<string>("");

  const resetSetStates = () => {
    setProgress(0);
    setResponseStatus("uploading");
    setResponseErrorMessage("");
    setImage("");
  };

  const postImage = async (file: File) => {
    resetSetStates();

    setImage(URL.createObjectURL(file));

    try {
      setResponseStatus("uploading");
      const formData = new FormData();
      formData.append("file", file);

      await axios.post("https://ej2.syncfusion.com/services/api/uploadbox/Save", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
        onUploadProgress: (progressEvent) => {
          const checkProgressEvent = progressEvent?.total || 0;
          const percentCompleted = Math.round((progressEvent.loaded * 100) / checkProgressEvent);
          setProgress(percentCompleted);
        },
      });
      setResponseStatus("success");
    } catch (error) {
      setResponseStatus("error");
      setResponseErrorMessage("Error saving file. Try again!");
    }
  };

  <Uploader
    title="Drag and drop or search for your files"
    description="Files in JPG or PNG format. 397 x 299 (WxH) - Size Max 300 KB"
    accept=".jpg, .jpeg, .png"
    aspectRatio={{ width: 397, height: 299 }}
    max={2 * 1024 * 1024}
    onHandleChange={postImageUpload}
    onHandleDelete={resetSetStates}
    progress={progress > 0 && progress <= 100 ? progress : undefined}
    progressMessage={progress > 0 && progress <= 100 ? `${progress}%` : ""}
    responseStatus={responseStatus}
    responseErrorMessage={responseErrorMessage}
    limitErrorMessage="Size limit 2 MB."
    typesErrorMessage="Files JPG or PNG only."
  />
 * ```
 *
 * #### Demo:
*/
export declare function Uploader({ title, description, disabled, typesErrorMessage, limitErrorMessage, onHandleChange, onHandleDelete, aspectRatio, iconName, multiple, responseStatus, responseErrorMessage, progress, progressMessage, accept, max, className, loadingMessage, imageThumbnail, subtitle, ...rest }: IUploader): import("react/jsx-runtime").JSX.Element;
