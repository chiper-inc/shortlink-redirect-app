"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Icon = exports.PhosphorIcons = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Icons = __importStar(require("@phosphor-icons/react"));
const { IconContext, IconBase } = Icons, restIcons = __rest(Icons, ["IconContext", "IconBase"]);
exports.PhosphorIcons = Object.assign({}, restIcons);
function Icon({ name, color, weight = "regular", size = 24, className, }) {
    const IconName = ((name && (Icons === null || Icons === void 0 ? void 0 : Icons[name]))
        ? Icons[name]
        : Icons.NoteBlank);
    const provider = (0, react_1.useMemo)(() => (IconName && ((0, jsx_runtime_1.jsx)(IconContext.Provider, Object.assign({ value: {
            color,
            size,
            weight,
            className,
        } }, { children: (0, jsx_runtime_1.jsx)(IconName, {}) })))), [IconName, color, size, weight, className]);
    return provider;
}
exports.Icon = Icon;
