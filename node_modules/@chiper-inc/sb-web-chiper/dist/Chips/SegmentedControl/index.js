"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SegmentedControl = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Option_1 = require("./Option");
/**
 * A `SegmentedControl` is a linear set of two or more segments, each of which functions
 * as a button.
 *
 * #### Usage:
 *
 * ```tsx
  import { SegmentedControl } from "@chiper-inc/sb-web-chiper";

  <SegmentedControl options={['Option 1', 'Option 2']} initialSelected={0} />
 * ```
 *
 * #### Demo:
 */
function SegmentedControl(_a) {
    var { options, initialSelected = 0, disable = false, controlSelected, className = "" } = _a, rest = __rest(_a, ["options", "initialSelected", "disable", "controlSelected", "className"]);
    const [selected, setSelected] = (0, react_1.useState)(initialSelected);
    const onOptionClick = (0, react_1.useCallback)((index) => {
        setSelected(index);
        if (!disable)
            controlSelected === null || controlSelected === void 0 ? void 0 : controlSelected(index);
    }, [disable, controlSelected]);
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: `
        sbw-mx-4
        sbw-inline-flex
        sbw-rounded
        sbw-border
        sbw-border-greyscale-gray25
        sbw-bg-primary-white sbw-p-0.5
        ${className}
      ` }, rest, { children: options.map((text, index) => ((0, jsx_runtime_1.jsx)(Option_1.Option, { disable: disable, selected: index === selected, text: text, onClick: () => onOptionClick(index) }, text))) })));
}
exports.SegmentedControl = SegmentedControl;
