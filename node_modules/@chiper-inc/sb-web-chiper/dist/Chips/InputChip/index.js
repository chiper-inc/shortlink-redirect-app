"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputChip = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const Colors_1 = __importDefault(require("../../Theme/Colors"));
const Icon_1 = require("../../Theme/Icon");
/**
 * A `InputChip` is a label used to categorize, or organize items using keywords that describe them
 *
 * #### Usage:
 *
 * ```tsx
  import { InputChip } from "@chiper-inc/sb-web-chiper";

  <InputChip text='Label' outlined />
  <InputChip text='Label' outlined disabled />
  <InputChip text='Label' />
  <InputChip text='Label' iconLeft="CalendarCheck" action={() => null} />
  <InputChip text='Label' iconLeft="X" />
  <InputChip text='Label' iconLeft="X" iconRight="Check" removeInput={() => null} />
 * ```
 *
 * #### Demo:
 */
function InputChip(_a) {
    var { text, iconRight = "None", iconLeft = "None", outlined = false, className = "", disabled = false, removeInput, action } = _a, rest = __rest(_a, ["text", "iconRight", "iconLeft", "outlined", "className", "disabled", "removeInput", "action"]);
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ role: "presentation", onClick: action && action, onKeyDown: action && action, className: "sbw-h-6 sbw-cursor-pointer" }, { children: (0, jsx_runtime_1.jsxs)("span", Object.assign({ className: `
          sbw-flex
          sbw-items-center
          sbw-whitespace-nowrap
          sbw-rounded-md
          sbw-border
          sbw-py-1
          sbw-px-2
          sbw-font-sans
          sbw-text-base
          sbw-leading-none
          ${disabled || outlined
                ? "sbw-bg-primary-white"
                : "sbw-bg-greyscale-gray25"}
          hover:sbw-bg-greyscale-gray5
          ${className}
          sbw-text-xs
          ${disabled
                ? "sbw-text-greyscale-gray100"
                : "sbw-text-primary-yankeesBlue"}
          ${outlined ? "sbw-border-greyscale-gray60" : "sbw-border-transparent"}
        ` }, rest, { children: [iconLeft && iconLeft !== "None" && ((0, jsx_runtime_1.jsx)("i", Object.assign({ role: "presentation", "data-testid": "chip-icon", className: "sbw-mr-[6px]" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: iconLeft, color: `${disabled ? Colors_1.default.greyscale.gray100 : Colors_1.default.primary.yankeesBlue}`, size: 12 }) }))), text, iconRight && iconRight !== "None" && ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", className: "sbw-ml-[6px]", onClick: removeInput && removeInput }, { children: (0, jsx_runtime_1.jsx)("i", Object.assign({ role: "presentation", "data-testid": "chip-icon" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: iconRight, color: `${disabled
                                ? Colors_1.default.greyscale.gray100
                                : Colors_1.default.primary.yankeesBlue}`, size: 12 }) })) })))] })) })));
}
exports.InputChip = InputChip;
