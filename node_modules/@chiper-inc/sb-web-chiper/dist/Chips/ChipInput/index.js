"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChipInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const Colors_1 = __importDefault(require("../../Theme/Colors"));
const Icon_1 = require("../../Theme/Icon");
/**
 * A `ChipInput` is a label used to categorize, or organize items using keywords that describe them
 *
 * #### Usage:
 *
 * ```tsx
  import { ChipInput } from "@chiper-inc/sb-web-chiper";

  <ChipInput text='Label' outlined />
  <ChipInput text='Label' outlined disabled />
  <ChipInput text='Label' />
  <ChipInput text='Label' iconLeft="CalendarCheck" action={() => null} />
  <ChipInput text='Label' iconLeft="X" />
  <ChipInput text='Label' iconLeft="X" iconRight="Check" removeInput={() => null} />
 * ```
 *
 * #### Demo:
 */
function ChipInput(_a) {
    var { text, iconRight = "None", iconLeft = "None", className = "", disabled = false, avatar = false, weightIconLeft = "thin", weightIconRight = "thin", sizeIcon = 16, active = false, onRightClick, onClick } = _a, rest = __rest(_a, ["text", "iconRight", "iconLeft", "className", "disabled", "avatar", "weightIconLeft", "weightIconRight", "sizeIcon", "active", "onRightClick", "onClick"]);
    return ((0, jsx_runtime_1.jsxs)("button", Object.assign({ type: "button", disabled: disabled, className: `
                  sbw-flex 
                  sbw-h-8
                  sbw-cursor-pointer
                  sbw-items-center
                  sbw-whitespace-nowrap
                  focus-visible:sbw-outline
                  focus-visible:sbw-outline-2
                  focus-visible:-sbw-outline-offset-2
                  focus-visible:sbw-outline-secondary-brightYellow
                  ${avatar ? "sbw-rounded-full" : "sbw-rounded"}
                  sbw-border
                  sbw-px-2
                  sbw-py-1.5
                  ${!disabled && !active ? "hover:sbw-bg-greyscale-gray60" : ""}
                  
                  ${active && !disabled
            ? "sbw-border-secondary-green10 sbw-bg-secondary-green10 hover:sbw-border-greyscale-gray60"
            : "sbw-bg-primary-white"}
                  ${className}
                  sbw-text-xs
                  ${disabled
            ? "sbw-text-greyscale-gray100"
            : "sbw-text-primary-darkBlueGray"}
                sbw-border-greyscale-gray60
        ` }, rest, { children: [(0, jsx_runtime_1.jsxs)("div", Object.assign({ role: "presentation", onClick: onClick, onKeyDown: onClick, className: "\n          sbw-flex\n          sbw-h-8\n          sbw-cursor-pointer\n          sbw-items-center\n          sbw-whitespace-nowrap" }, { children: [iconLeft && iconLeft !== "None" && ((0, jsx_runtime_1.jsx)("i", Object.assign({ role: "presentation", "data-testid": "chip-icon", className: "sbw-mr-1.5" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: iconLeft, color: disabled ? Colors_1.default.greyscale.gray60 : Colors_1.default.primary.darkBlueGray, size: sizeIcon, weight: weightIconLeft }) }))), (0, jsx_runtime_1.jsx)("span", Object.assign({ className: `${disabled
                            ? "sbw-text-greyscale-gray100"
                            : "sbw-text-primary-darkBlueGray"} 
              sbw-font-sans
              sbw-text-sm
        ` }, { children: text }))] })), iconRight && iconRight !== "None" && ((0, jsx_runtime_1.jsx)("div", Object.assign({ role: "presentation", className: "sbw-ml-1.5", onClick: onRightClick }, { children: (0, jsx_runtime_1.jsx)("i", Object.assign({ role: "presentation", "data-testid": "chip-icon" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: iconRight, color: `${disabled ? Colors_1.default.greyscale.gray60 : Colors_1.default.primary.darkBlueGray}`, size: sizeIcon, weight: weightIconRight }) })) })))] })));
}
exports.ChipInput = ChipInput;
