"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputText = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const deprecate_1 = require("../../Utils/deprecate");
/**
 * ⚠️ Deprecated. DO NOT USE! Use `TextField` instead.
 *
 * #### Usage:
 *
 * ```tsx
  <InputText
    label="Write your text"
    placeholder="optional prop"
    value={input}
    onChange={(e: ChangeEvent<HTMLInputElement>) => setInput(e.target.value)}
  />
 * ```
 *
 * #### Demo:
 * @deprecated
 */
exports.InputText = (0, react_1.forwardRef)((_a, ref) => {
    var { label, onChange, type = "text", disabled = false, required = false, isValid = true, full = false, contentBefore, contentAfter } = _a, rest = __rest(_a, ["label", "onChange", "type", "disabled", "required", "isValid", "full", "contentBefore", "contentAfter"]);
    (0, deprecate_1.deprecate)({
        message: "InputText is deprecated. Use TextField instead.",
    });
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: `sbw-relative sbw-min-w-240 ${full ? "sbw-w-full" : "sbw-inline-block"}` }, { children: [contentBefore && (contentBefore), (0, jsx_runtime_1.jsx)("label", Object.assign({ "data-testid": "label-text", "aria-label": label, className: `${disabled ? "sbw-text-greyscale-gray60" : "sbw-text-primary-darkBlueGray"}
          sbw-absolute
          sbw-left-4
          sbw-top-2
          sbw-text-base
          sbw-font-normal
          sbw-line-clamp-1
          ` }, { children: label })), (0, jsx_runtime_1.jsx)("input", Object.assign({ ref: ref, onChange: onChange, type: type, "data-testid": "input-text", disabled: disabled, required: required, className: `${disabled ? "sbw-text-greyscale-gray60" : "sbw-text-primary-yankeesBlue"}
            ${isValid ? "sbw-border-greyscale-gray60" : "sbw-border-primary-chiperBrandRed"}
            sbw-min-h-68
            sbw-w-full
            sbw-rounded-md
            sbw-border
            sbw-bg-transparent
            sbw-px-4
            sbw-pt-7
            sbw-pb-2
            sbw-text-xl
            focus:sbw-outline-none
            ` }, rest)), contentAfter && (contentAfter)] })));
});
