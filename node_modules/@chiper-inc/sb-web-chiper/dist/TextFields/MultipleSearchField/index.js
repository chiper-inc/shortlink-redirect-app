"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultipleSearchField = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Checkbox_1 = require("../../Form/Checkbox");
const LoaderSpinner_1 = require("../../Feedback/LoaderSpinner");
const helpers_1 = require("./helpers");
const Icon_1 = require("../../Theme/Icon");
/**
 * `MultipleSearchField` allows users to search for information (product) within
 * a specified data set. It provides a customizable search input field
 * with optional search results dropdown or list, as well as additional props
 *
 * #### Usage:
 *
 * ```tsx
  import { useState } from "react";
  import { MultipleSearchField } from "@chiper-inc/sb-web-chiper";
  import { SearchResult } from '@chiper-inc/sb-web-chiper/dist/Form/MultipleSearchField/interface'

  const products = [
    {
      id: 1,
      title: "Bebida Hidratante Mandarina Gatorade",
      sku: "0987656432183",
      image: "https://supermercadoacuario.com.ar/app/files/company_35/products/65035_7792170042005.jpg",
      description: "500ml",
    },
    {
      id: 2,
      title: "Coca Col",
      sku: "098765632181",
      image: "https://coca-colafemsa.com/wp-content/uploads/2019/11/3-1.png",
      description: "500ml",
    },
    ...
  ];

  const [searchInput, setSearchInput] = useState("");
  const [items, setItems] = useState<SearchResult[]>([]);
  const [resultList, setResultList] = useState<SearchResult[]>([]);

  // Function to capture elements of the list of results
  const handleClick = useCallback((itemValue: SearchResult) => {
    const filterId = items.filter((item: SearchResult) => item.id === itemValue.id);
    if (filterId.length > 0) {
      setItems((current) => current.filter((i) => i.id !== itemValue.id));
    } else {
      setItems([...items, itemValue]);
    }
  }, [items]);

  // Or With Result Click
  <MultipleSearchField
    placeholder="Search..."
    items={products}
    value={searchInput}
    onChange={setSearchInput}
    onClearResult={() => {
      setResultList([]);
    }}
    activeResultList={items}
    onResultClick={handleClick}
  />
 * ```
 *
 * #### Demo:
 */
function MultipleSearchField(_a) {
    var _b;
    var { isList = true, items, placeholder, value, onChange, onClearResult, onResultClick, maxHeight, hasDebounce = false, disabled = false, className = "", smallHeight = false, activeResultList } = _a, props = __rest(_a, ["isList", "items", "placeholder", "value", "onChange", "onClearResult", "onResultClick", "maxHeight", "hasDebounce", "disabled", "className", "smallHeight", "activeResultList"]);
    const refContainer = (0, react_1.useRef)(null);
    const inputSearchRef = (0, react_1.useRef)(null);
    const debounceFn = (0, react_1.useRef)({});
    const [results, setResults] = (0, react_1.useState)([]);
    const [isListOpen, setIsOpenList] = (0, react_1.useState)(false);
    const eraseField = (0, react_1.useCallback)(() => {
        var _a;
        setIsOpenList(false);
        if ((_a = inputSearchRef === null || inputSearchRef === void 0 ? void 0 : inputSearchRef.current) === null || _a === void 0 ? void 0 : _a.value) {
            inputSearchRef.current.value = "";
        }
        if (!isList && onClearResult) {
            setResults([]);
            onClearResult();
        }
    }, [isList, onClearResult]);
    const handleInputChange = (event) => {
        setResults([]);
        const newQuery = event.target.value;
        if (newQuery === "") {
            eraseField();
        }
        else {
            setIsOpenList(true);
            if (debounceFn.current) {
                clearTimeout(debounceFn.current);
            }
            debounceFn.current = setTimeout(() => {
                onChange(newQuery);
            }, (hasDebounce) ? 700 : 0);
        }
    };
    const handleFilterActive = (id) => {
        const filterId = activeResultList.filter((item) => item.id === id);
        if (filterId.length > 0)
            return true;
        return false;
    };
    const handleMouseDown = (0, react_1.useCallback)((event) => {
        const targetName = event.target;
        if (targetName && refContainer) {
            if (refContainer.current !== null) {
                refContainer.current.contains(targetName);
            }
            if (refContainer.current !== null && refContainer.current.contains(targetName) === false) {
                eraseField();
            }
        }
        return false;
    }, [eraseField]);
    (0, react_1.useEffect)(() => {
        var _a;
        if (items.length > 0 && ((_a = inputSearchRef === null || inputSearchRef === void 0 ? void 0 : inputSearchRef.current) === null || _a === void 0 ? void 0 : _a.value)) {
            const suggestions = (0, helpers_1.suggestResults)(inputSearchRef.current.value, items);
            const findSuggestions = suggestions.length > 0 ? suggestions : items;
            setResults(findSuggestions);
            setIsOpenList(true);
        }
        else {
            setIsOpenList(false);
            setResults([]);
        }
    }, [items, items.length, activeResultList]);
    (0, react_1.useEffect)(() => {
        if (isListOpen) {
            window.addEventListener("mousedown", handleMouseDown);
            return () => window.removeEventListener("mousedown", handleMouseDown);
        }
        return () => { };
    }, [handleMouseDown, isListOpen]);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({}, props, { className: `
        sbw-relative
        ${className}
      `, ref: refContainer }, { children: [(0, jsx_runtime_1.jsxs)("div", Object.assign({ className: `
          sbw-flex
          sbw-w-full
          sbw-items-center
          sbw-rounded-md
          sbw-border
          sbw-border-greyscale-gray60
          sbw-px-4
          ${disabled ? "sbw-bg-greyscale-gray60" : "sbw-bg-primary-white"}
        ` }, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ className: disabled ? "sbw-text-greyscale-gray200" : "sbw-text-primary-yankeesBlue" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "MagnifyingGlass", size: 14 }) })), (0, jsx_runtime_1.jsx)("input", { type: "text", ref: inputSearchRef, "data-testid": "multipleSearchField-input", placeholder: placeholder, defaultValue: value, onChange: handleInputChange, disabled: disabled, className: `
            sbw-w-full
            sbw-pl-2
            sbw-pr-4
            sbw-text-base
            placeholder:sbw-text-greyscale-gray300
            focus:sbw-border-transparent
            focus:sbw-outline-none
            ${smallHeight ? "sbw-py-3" : "sbw-py-[14px]"}
            ${disabled
                            ? "sbw-bg-greyscale-gray60 sbw-text-greyscale-gray200 placeholder:sbw-text-greyscale-gray200"
                            : "sbw-bg-primary-white sbw-text-primary-yankeesBlue placeholder:sbw-text-primary-yankeesBlue"}
          ` }), isList ? ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", "data-testid": "search-btn-open", disabled: disabled, onClick: () => {
                            if (results.length > 0) {
                                setIsOpenList((prevOpenList) => !prevOpenList);
                            }
                        }, className: disabled
                            ? "sbw-text-greyscale-gray200"
                            : `sbw-cursor-pointer
                sbw-text-primary-yankeesBlue
                  focus-visible:sbw-outline
                  focus-visible:sbw-outline-2
                focus-visible:sbw-outline-secondary-brightYellow
                ` }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: isListOpen ? "CaretUp" : "CaretDown", size: 14 }) }))) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(value && ((_b = inputSearchRef === null || inputSearchRef === void 0 ? void 0 : inputSearchRef.current) === null || _b === void 0 ? void 0 : _b.value)) && ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", "data-testid": "search-btn-close", disabled: disabled, onClick: eraseField, className: disabled
                                    ? "sbw-text-greyscale-gray200"
                                    : `sbw-cursor-pointer
                      sbw-text-primary-yankeesBlue
                      focus-visible:sbw-outline
                      focus-visible:sbw-outline-2
                    focus-visible:sbw-outline-secondary-brightYellow
                    ` }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "X", size: 14 }) }))), (0, jsx_runtime_1.jsx)("div", {})] }))] })), isListOpen && ((0, jsx_runtime_1.jsx)("div", Object.assign({ "data-testid": "multipleSearchField-results", style: { maxHeight }, className: `
            sbw-absolute
            sbw-left-0
            sbw-top-full
            sbw-z-50
            sbw-w-full
            sbw-overflow-x-hidden
            sbw-rounded-md
            sbw-bg-white
            sbw-shadow-lg
            ${maxHeight ? "sbw-overflow-y-scroll" : "sbw-overflow-y-auto"}
          ` }, { children: (0, jsx_runtime_1.jsx)("div", Object.assign({ className: "sbw-flex sbw-flex-col sbw-p-2" }, { children: results.length > 0 ? (results.map((result, index) => ((0, jsx_runtime_1.jsx)(Checkbox_1.Checkbox, { type: "checkbox", "data-testid": `multiplesearchfield-result-item-${index}`, checked: handleFilterActive(result.id), onChange: () => onResultClick(result), label: ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-ml-2 sbw-flex sbw-flex-col" }, { children: [(0, jsx_runtime_1.jsx)("h5", Object.assign({ className: "sbw-text-primary-yankeesBlue" }, { children: result.title })), (0, jsx_runtime_1.jsx)("span", Object.assign({ className: "sbw-text-sm sbw-text-primary-darkBlueGray" }, { children: result.description }))] }))), value: String(result.id), className: "sbw-p-2 hover:sbw-bg-greyscale-gray5" }, result.id)))) : ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: "sbw-flex sbw-items-center sbw-justify-center sbw-p-4" }, { children: (0, jsx_runtime_1.jsx)(LoaderSpinner_1.LoaderSpinner, { type: "green" }) }))) })) })))] })));
}
exports.MultipleSearchField = MultipleSearchField;
