"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextFieldWithChip = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Colors_1 = __importDefault(require("../../Theme/Colors"));
const Icon_1 = require("../../Theme/Icon");
const InputChip_1 = require("../../Chips/InputChip");
/**
 * `TextFieldWithChip` allow users to enter text with Chip.
 *
 * #### Usage:
 *
 * ```tsx
  import { useState } from "react";
  import { TextFieldWithChip } from "@chiper-inc/sb-web-chiper";

  const [input, setInput] = useState("");
  const [chips, setChips] = useState<any[]>([]);

  const handlePressEnter = (e: any) => {
    const textValue = e.target.value;
    if (e.key === ",") e.preventDefault();
    if (e.key !== "," || !input) return;
    setChips((prevState) => [...prevState, textValue]);
    setInput("");
  };

  const remove = (chipToRemove: any) => {
    const updatedChips = chips && chips.filter((chip) => chip !== chipToRemove);
    setChips(updatedChips);
  };

  <TextFieldWithChip
    {...{ chips, setChips }}
    value={input}
    name="basic"
    placeholder="Email"
    type="email"
    required
    onChange={(e) => setInput(e.target.value)}
    onKeyDown={handlePressEnter}
    removeChip={remove}
    helperText="Puedes agregar varios mails separandolos con coma."
  />

  <TextFieldWithChip
    {...{ chips, setChips }}
    value={input}
    name="basic"
    placeholder="Email"
    type="email"
    required
    onChange={(e) => setInput(e.target.value)}
    onKeyDown={handlePressEnter}
    removeChip={remove}
    helperText="Error, please fill field"
    isValid={false}
  />
 * ```
 *
 * #### Demo:
 */
exports.TextFieldWithChip = (0, react_1.forwardRef)((_a, ref) => {
    var { placeholder, name, value, id, onChange, type = "text", rightIcon, disabled = false, required = false, isValid = true, full = false, "data-testid": testID = "", className = "", onKeyDown, chips, setChips, removeChip, helperText } = _a, rest = __rest(_a, ["placeholder", "name", "value", "id", "onChange", "type", "rightIcon", "disabled", "required", "isValid", "full", "data-testid", "className", "onKeyDown", "chips", "setChips", "removeChip", "helperText"]);
    const empty = value === "";
    const primaryIconColor = Colors_1.default.primary[!isValid ? "chiperBrandRed" : "yankeesBlue"];
    const iconColor = disabled ? Colors_1.default.greyscale.gray200 : primaryIconColor;
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: `
          sbw-group
          sbw-flex
          sbw-min-w-240
          sbw-flex-col
          ${full && "sbw-w-full"}
          ${className}
        ` }, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ className: `${disabled
                    ? "sbw-bg-greyscale-gray25 sbw-text-greyscale-gray200"
                    : "sbw-bg-transparent sbw-text-primary-yankeesBlue"}
          ${!isValid && !disabled
                    ? "sbw-border-primary-chiperBrandRed"
                    : "sbw-border-greyscale-gray60 focus:sbw-border-primary-yankeesBlue"}
            sbw-flex
            sbw-items-center
            sbw-rounded
            sbw-border
            sbw-border-solid
            sbw-bg-white
            sbw-p-2
            ` }, { children: (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-flex sbw-h-9 sbw-w-full sbw-items-end sbw-overflow-auto" }, { children: [chips
                            && chips.map((chip) => ((0, jsx_runtime_1.jsx)(InputChip_1.InputChip, { text: chip, iconRight: "X", removeInput: () => removeChip === null || removeChip === void 0 ? void 0 : removeChip(chip), className: "sbw-ml-2" }, chip))), (0, jsx_runtime_1.jsx)("label", Object.assign({ "data-testid": "testPlaceholder", "aria-label": placeholder, htmlFor: name, className: `${disabled
                                ? "sbw-text-greyscale-gray200"
                                : "sbw-text-primary-darkBlueGray"}
                sbw-pl-2
                ${empty && (chips === null || chips === void 0 ? void 0 : chips.length) === 0
                                ? "sbw-top-[43px] sbw-text-base sbw-leading-normal"
                                : "sbw-top-[35px] sbw-text-[10px] sbw-leading-none"}
                sbw-absolute
                sbw-font-normal
                sbw-transition-all
                sbw-ease-in-out
                sbw-line-clamp-1
                group-focus-within:sbw-top-[35px]
                group-focus-within:sbw-text-[10px]
                group-focus-within:sbw-leading-none
              ` }, { children: placeholder })), (0, jsx_runtime_1.jsx)("input", Object.assign({ ref: ref, name: name, value: value, id: id || name, type: type, "data-testid": testID, disabled: disabled, required: required, onChange: onChange, onKeyDown: onKeyDown, className: `
                sbw-mt-1.5
                sbw-ml-2
                sbw-flex
                sbw-h-5
                sbw-w-full
                sbw-p-0
                sbw-text-base
                sbw-leading-none
                focus:sbw-outline-none
              ` }, rest)), !!rightIcon && ((0, jsx_runtime_1.jsx)("i", Object.assign({ role: "presentation", "data-testid": "textfieldRightIcon", className: "sbw-absolute sbw-right-4 sbw-top-1/2 -sbw-translate-y-1/2" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: rightIcon, color: iconColor, size: 16 }) })))] })) })), helperText && ((0, jsx_runtime_1.jsx)("p", Object.assign({ className: `
              ${!isValid && !disabled
                    ? "sbw-text-primary-chiperBrandRed"
                    : "sbw-text-greyscale-gray200"}
              sbw-mt-1
              sbw-pl-4
              sbw-text-xs
              sbw-line-clamp-1
            ` }, { children: helperText })))] })));
});
