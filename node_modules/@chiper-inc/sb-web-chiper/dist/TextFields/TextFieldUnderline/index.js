"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextFieldUnderline = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_input_mask_1 = __importDefault(require("react-input-mask"));
/**
 * `TextFieldUnderline` allow users to enter text into a UI.
 *  It typically appears in forms and dialogs.
 *
 * #### Usage:
 *
 * ```tsx
  import { useState } from "react";
  import { TextFieldUnderline } from "@chiper-inc/sb-web-chiper";

  const [input, setInput] = useState("");

  <TextFieldUnderline
    label="edad"
    optional="aÃ±os"
    descriptiveText="introdusca edad"
    onChange={(e) => setInput(e.target.value)}
    placeholder="introdusca numero"
    value={input}
  />

  <TextFieldUnderline
    disabled
    placeholder="introdusca numero"
    label="algun"
    optional="numero"
  />

  <TextFieldUnderline
    onChange={(e) => setInput(e.target.value)}
    value={input}
    placeholder="introdusca un numero"
    error="rellene el campo"
    mask="99.999.999/9999-99"
  />
 * ```
 *
 * #### Demo:
 */
function TextFieldUnderline(_a) {
    var { label, error, placeholder, disabled, optional, descriptiveText, onChange, value, isFocus, dataTestId, mask } = _a, props = __rest(_a, ["label", "error", "placeholder", "disabled", "optional", "descriptiveText", "onChange", "value", "isFocus", "dataTestId", "mask"]);
    const isError = typeof error === "string";
    const borderYellow = "sbw-border-secondary-brightYellow";
    const borderGray25 = "sbw-border-greyscale-gray25";
    const borderGray60 = "sbw-border-greyscale-gray600";
    const borderGray100 = "sbw-border-greyscale-gray100";
    const randomId = `${Math.random()}`;
    const [underLineColor, setUnderLineColor] = (0, react_1.useState)(borderGray25);
    function logEvent(eventType) {
        return () => {
            if (eventType === "focus")
                setUnderLineColor(borderYellow);
            if (eventType === "blur")
                setUnderLineColor(borderGray25);
            if (underLineColor !== borderGray100) {
                if (eventType === "hover")
                    setUnderLineColor(borderGray60);
                if (eventType === "mouseLeave")
                    setUnderLineColor(borderGray25);
            }
        };
    }
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-relative" }, { children: [(0, jsx_runtime_1.jsx)("label", Object.assign({ className: `${disabled ? "sbw-text-greyscale-gray100" : "sbw-text-primary-yankeesBlue"} sbw-mb-0  sbw-pb-0 sbw-text-sm sbw-text-primary-yankeesBlue` }, { children: label })), (0, jsx_runtime_1.jsx)("label", Object.assign({ className: `sbw-ml-2 sbw-text-sm ${disabled ? "sbw-text-greyscale-gray100" : "sbw-text-greyscale-gray300"}` }, { children: optional })), (0, jsx_runtime_1.jsx)("label", Object.assign({ onMouseEnter: logEvent("hover"), htmlFor: randomId, "aria-label": placeholder, className: `
          ${disabled ? "sbw-text-greyscale-gray100" : "sbw-text-greyscale-gray300"}
          ${!value ? "sbw-visible" : "sbw-invisible"}
          sbw-absolute
          sbw-top-9
          sbw-line-clamp-1
          sbw-cursor-text
          sbw-text-2xl
          sbw-font-normal
          sbw-transition-all
          sbw-ease-in-out
        ` }, { children: placeholder })), mask
                ? ((0, jsx_runtime_1.jsx)(react_input_mask_1.default, Object.assign({ id: randomId, className: "\n            sbw-mt-1\n            sbw-block\n            sbw-w-full\n            sbw-bg-white\n            sbw-py-2\n            sbw-text-2xl\n            sbw-text-primary-yankeesBlue\n            focus:sbw-border-transparent\n            focus:sbw-outline-none\n            ", type: "text", value: value, mask: mask, maskPlaceholder: null, onChange: onChange, disabled: disabled, onMouseLeave: logEvent("mouseLeave"), onFocus: logEvent("focus"), onMouseOver: logEvent("hover"), onBlur: logEvent("blur"), "data-testid": dataTestId }, props)))
                : ((0, jsx_runtime_1.jsx)("input", Object.assign({ id: randomId, onChange: onChange, value: value, disabled: disabled, onMouseLeave: logEvent("mouseLeave"), onFocus: logEvent("focus"), onMouseOver: logEvent("hover"), onBlur: logEvent("blur"), "data-testid": dataTestId, className: "\n              sbw-mt-1\n              sbw-block\n              sbw-w-full\n              sbw-bg-white\n              sbw-py-2\n              sbw-text-2xl\n              sbw-text-primary-yankeesBlue\n              focus:sbw-border-transparent\n              focus:sbw-outline-none\n            " }, props))), isError ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("hr", { className: "\n              sbw-mb-1\n              sbw-border\n              sbw-border-primary-chiperBrandRed\n              sbw-text-sm\n            " }), (0, jsx_runtime_1.jsx)("p", Object.assign({ className: "\n              sbw-mt-0\n              sbw-pt-0\n              sbw-text-sm\n              sbw-text-primary-chiperBrandRed" }, { children: error }))] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("hr", { className: `
              ${disabled ? "sbw-text-greyscale-gray100" : underLineColor}
              ${isFocus && borderYellow}
              sbw-border
              sbw-text-sm
            ` }), (0, jsx_runtime_1.jsx)("p", Object.assign({ className: `
              sbw-text-sm
              ${disabled
                            ? "sbw-text-greyscale-gray100"
                            : "sbw-text-greyscale-gray300"}
            ` }, { children: optional }))] }))] })));
}
exports.TextFieldUnderline = TextFieldUnderline;
TextFieldUnderline.defaultProps = {
    error: false,
    label: false,
    placeholder: false,
    disabled: false,
    optional: false,
    descriptiveText: false,
    isFocus: false,
    dataTestId: "",
    mask: undefined,
};
