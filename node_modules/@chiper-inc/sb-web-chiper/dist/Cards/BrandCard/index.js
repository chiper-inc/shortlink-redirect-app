"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrandCard = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const TagAd_1 = require("../../Display/TagAd");
const BoxProduct_1 = require("../BoxProduct");
const BoxProductDetails_1 = require("../BoxProductDetails");
const normalizeStyle_1 = __importDefault(require("../../Utils/normalizeStyle"));
const Skeleton_1 = require("../../Feedback/Skeleton");
/**
 * A `BrandCard` show information container for displaying content of brand
 *
 * #### Usage:
 *
 * ```tsx
  import { BrandCard } from "@chiper-inc/sb-web-chiper";

  <BrandCard
    id={id}
    image={image}
    brandName={brandName}
    onClickBrand={onClickBrand}
    products={[]}
  />
 * ```
 *
 * #### Demo:
 */
exports.BrandCard = (0, react_1.memo)(({ id, image, brandName, onClickBrand, products, adTitle, isAd, indexPosition = 0, isLoading = false, }) => {
    const [productSelected, setProductSelected] = (0, react_1.useState)();
    const renderProduct = (productSelected && products.length > 0)
        ? products.map((product) => ((0, jsx_runtime_1.jsx)(BoxProduct_1.BoxProduct, { id: product.id, image: product.image, altImage: product.name, isSelected: productSelected.id === product.id, onChangeProduct: () => {
                product.onClick(indexPosition);
                setProductSelected(product);
            } }, `boxProduct-${product.id}`))) : null;
    (0, react_1.useLayoutEffect)(() => {
        setProductSelected(products[0]);
    }, [products]);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ "data-testid": "brandMiniatureCard", className: "sbw-relative sbw-flex sbw-rounded sbw-border sbw-border-greyscale-gray25 sbw-bg-white", style: {
            minWidth: (0, normalizeStyle_1.default)(248),
            maxWidth: (0, normalizeStyle_1.default)(248),
            minHeight: (0, normalizeStyle_1.default)(isLoading ? 0 : 259),
            maxHeight: (0, normalizeStyle_1.default)(276),
        } }, { children: [isAd && adTitle && ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: "sbw-absolute sbw-h-22 sbw-w-full sbw-min-w-full" }, { children: (0, jsx_runtime_1.jsx)(TagAd_1.TagAd, { text: adTitle }) }))), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-py-3 sbw-pl-2 sbw-pr-3" }, { children: [(isLoading || !image) ? ((0, jsx_runtime_1.jsx)(Skeleton_1.Skeleton, { widthClass: "sbw-w-12", heightClass: "sbw-h-12", marginBottom: "sbw-mb-5" })) : ((0, jsx_runtime_1.jsx)(BoxProduct_1.BoxProduct, { id: id, image: image, altImage: brandName, isBrand: true, goToBrand: onClickBrand }, `brandBox-${id}`)), (isLoading || products.length === 0) ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Skeleton_1.Skeleton, { widthClass: "sbw-w-12", heightClass: "sbw-h-12", marginBottom: "sbw-mb-5" }), (0, jsx_runtime_1.jsx)(Skeleton_1.Skeleton, { widthClass: "sbw-w-12", heightClass: "sbw-h-12" })] })) : (renderProduct)] })), (0, jsx_runtime_1.jsx)("div", Object.assign({ className: "sbw-h-auto sbw-w-full sbw-pt-1.5rem sbw-pl-2 sbw-pb-9px sbw-pr-0" }, { children: (isLoading || products.length === 0 || !productSelected) ? ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-flex sbw-flex-col" }, { children: [(0, jsx_runtime_1.jsx)(Skeleton_1.Skeleton, { widthClass: "sbw-w-40", heightClass: "sbw-h-7.5rem", marginBottom: "sbw-mb-0.5" }), (0, jsx_runtime_1.jsx)(Skeleton_1.Skeleton, { widthClass: "sbw-w-36", heightClass: "sbw-h-11px", marginBottom: "sbw-mb-0.5" }), (0, jsx_runtime_1.jsx)(Skeleton_1.Skeleton, { widthClass: "sbw-w-40", heightClass: "sbw-h-1.5rem" })] }))) : ((0, jsx_runtime_1.jsx)(BoxProductDetails_1.BrandProductDetail, { id: productSelected.id, name: productSelected.name, image: productSelected.image, discount: productSelected.discount, discountPrice: productSelected.discountPrice, originalPrice: productSelected.originalPrice, currentSymbol: productSelected.currentSymbol, onClickDetail: productSelected.onClickDetail, packaging: `${productSelected.measurement}${productSelected.measurementUnit}` })) }))] })));
});
