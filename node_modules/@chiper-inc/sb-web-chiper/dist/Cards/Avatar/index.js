"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Avatar = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const Icon_1 = require("../../Theme/Icon");
const interface_1 = require("../../Theme/Colors/interface");
const props_1 = require("./props");
/**
 * `Avatar` is used to give users a sense of identity and individuality within the digital space
 *
 * #### Usage:
 *
 * ```tsx
  import { Avatar } from "@chiper-inc/sb-web-chiper";

  <Avatar type="icon" />
 * ```
 *
 * #### Demo:
 */
function Avatar(_a) {
    var { imgSrc, letter, type, size = "medium", background = "chiperBrandRed", color = "white", icon = "User", className = "" } = _a, rest = __rest(_a, ["imgSrc", "letter", "type", "size", "background", "color", "icon", "className"]);
    const setType = {
        letter: ((0, jsx_runtime_1.jsx)("span", Object.assign({ className: `
          ${props_1.letterSizes[size]}
          sbw-font-sans
          sbw-font-normal
          sbw-leading-none
        `, style: { color: interface_1.setColors[color] }, "data-testid": "avatar-letter" }, { children: letter === null || letter === void 0 ? void 0 : letter.trim().charAt(0).toUpperCase() }))),
        image: ((0, jsx_runtime_1.jsx)("img", { src: imgSrc, alt: "user-thumbnail", "data-testid": "avatar-image", className: "sbw-border-none" })),
        icon: ((0, jsx_runtime_1.jsx)("i", Object.assign({ role: "presentation", "data-testid": "avatar-icon" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: icon, color: interface_1.setColors[color], size: size === "large" ? 20 : 14 }) }))),
    };
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: `
        ${props_1.avatarSizes[size]}
        sbw-inline-flex
        sbw-items-center
        sbw-justify-center
        sbw-overflow-hidden
        sbw-whitespace-nowrap
        sbw-rounded-full
        ${className}
      `, style: {
            background: interface_1.setColors[background],
        } }, rest, { children: setType[type] })));
}
exports.Avatar = Avatar;
Avatar.defaultProps = {
    size: "medium",
    background: "chiperBrandRed",
    color: "white",
    icon: "User",
};
