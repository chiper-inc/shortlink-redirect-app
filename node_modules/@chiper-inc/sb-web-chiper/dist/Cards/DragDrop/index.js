"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DragDrop = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const core_1 = require("@dnd-kit/core");
const sortable_1 = require("@dnd-kit/sortable");
/**
 * `DragDrop` and `DragItem` enables the drag and drop functionality for sorting
 * an array of items in a performant, accessible, and extensible manner.
 * It uses the `@dnd-kit/core` and `@dnd-kit/sortable` packages to implement the
 * drag and drop feature. The component accepts various props to control
 * the behavior of the drag and drop feature, such as the items to be sorted,
 * the callbacks for drag events, and the sorting strategy.
 *
 * Get information about DND Kit docs:
 * https://docs.dndkit.com/
 *
 * #### Usage:
 *
 * ```tsx
  import { useState } from "react";
  import { DragDrop, DragItem } from "@chiper-inc/sb-web-chiper";

  interface IDragList {
    id: string
    title: string
  }

  const [itemsDefault, setItemsDefault] = useState<IDragList[]>([
    { id: "1", title: "Chiper" },
    { id: "5", title: "Microsoft" },
  ]);

  const handleDragEnd = (items: IDragList[]) => {
    setItemsDefault(items);
  };

  return (
    <DragDrop
      vertical
      items={itemsDefault}
      onDragEnd={handleDragEnd}
    >
      {itemsDefault.map(({ id, title }) => (
        <DragItem
          id={id}
          key={id}
          className={(isDragging) => `
            ${isDragging ? "shadow-box" : ""}
          `}
        >
          {title}
        </DragItem>
      ))}
    </DragDrop>
  );
 * ```
 *
 * #### Handler drag event
 *
 * You can handler the drag event gets `draggable` from `children`
 * but it requires `dragHandler` and then you can listen to
 * and decide how to handle.
 *
 * ```tsx
  import { useState } from "react";
  import { DragDrop, DragItem } from "@chiper-inc/sb-web-chiper";

  interface IDragList { id: string }

  const [itemsDefault, setItemsDefault] = useState<IDragList[]>([
    { id: "1" }, { id: "5" },
  ]);

  const handleDragEnd = (items: IDragList[]) => {
    setItemsDefault(items);
  };

  return (
    <DragDrop
      items={itemsDefault}
      onDragEnd={handleDragEnd}
    >
      {itemsDefault.map(({ id }) => (
        <DragItem
          id={id}
          key={id}
          dragHandler
        >
          {({ draggable, isDragging }) => (
            <>
              <button type="button" {...draggable}>
                <Icon name="DotsSixHorizontal" />
              </button>
              <div>{id}</div>
            </>
          )}
        </DragItem>
      ))}
    </DragDrop>
  );
 * ```
 *
 * #### Demo:
 */
function DragDrop({ items, children, onDragEnd, onDragStart, className = "", vertical = false, disabled = false, testID = "dragdrop", }) {
    const sensors = (0, core_1.useSensors)((0, core_1.useSensor)(core_1.PointerSensor, {
        activationConstraint: {
            distance: 8,
        },
    }), (0, core_1.useSensor)(core_1.KeyboardSensor, {
        coordinateGetter: sortable_1.sortableKeyboardCoordinates,
    }));
    const handleDragEnd = (event) => {
        const { active, over } = event;
        if ((active === null || active === void 0 ? void 0 : active.id) && (over === null || over === void 0 ? void 0 : over.id) && active.id !== over.id) {
            const ids = items.map((item) => item.id);
            const oldIndex = ids.indexOf(String(active.id));
            const newIndex = ids.indexOf(String(over.id));
            const newArraySort = (0, sortable_1.arrayMove)(items, oldIndex, newIndex);
            onDragEnd(newArraySort, event);
        }
    };
    return ((0, jsx_runtime_1.jsx)(core_1.DndContext, Object.assign({ sensors: sensors, collisionDetection: core_1.closestCenter, onDragEnd: handleDragEnd, onDragStart: onDragStart }, { children: (0, jsx_runtime_1.jsx)("div", Object.assign({ "data-testid": testID, className: className }, { children: (0, jsx_runtime_1.jsx)(sortable_1.SortableContext, Object.assign({ items: items, disabled: disabled, strategy: vertical
                    ? sortable_1.verticalListSortingStrategy
                    : sortable_1.rectSortingStrategy }, { children: children })) })) })));
}
exports.DragDrop = DragDrop;
