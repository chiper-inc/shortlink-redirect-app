"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TooltipButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const TooltipButtonArrow_1 = require("../TooltipButtonArrow");
function TooltipButton({ children, position = "right", text, }) {
    const [show, setShow] = (0, react_1.useState)();
    const [centerPosition, setCenterPosition] = (0, react_1.useState)({});
    const tooltip = (0, react_1.useRef)(null);
    const calcPosition = (0, react_1.useCallback)((value, property) => {
        const midValue = value / 2;
        setCenterPosition({ [property]: `calc(50% - ${midValue + 3}px)` });
    }, []);
    const centerTooltip = (0, react_1.useCallback)(() => {
        if (tooltip.current) {
            const { height, width } = tooltip.current.getBoundingClientRect();
            if (position === "up" || position === "down")
                calcPosition(width, "left");
            if (position === "left" || position === "right")
                calcPosition(height, "top");
        }
    }, [position, calcPosition]);
    (0, react_1.useLayoutEffect)(centerTooltip, [centerTooltip, children, text]);
    const tooltipPositionClass = {
        up: "sbw-bottom-[100%]",
        down: "sbw-top-[100%]",
        left: "sbw-right-[100%]",
        right: "sbw-left-[100%]",
    };
    if (!text)
        return children;
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-relative", onMouseLeave: () => setShow(false) }, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ onMouseEnter: () => setShow(true) }, { children: children })), (0, jsx_runtime_1.jsx)("div", Object.assign({ ref: tooltip, "data-testid": "tooltip", style: centerPosition, className: `
          sbw-absolute
          sbw-z-50
          sbw-m-auto
          sbw-h-max
          sbw-w-max
          sbw-p-2
          sbw-transition-all
          ${tooltipPositionClass[position]}
          ${show ? "sbw-visible sbw-opacity-100" : "sbw-invisible sbw-opacity-0"}
        ` }, { children: (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-relative sbw-rounded sbw-bg-primary-yankeesBlue sbw-p-2" }, { children: [(0, jsx_runtime_1.jsx)(TooltipButtonArrow_1.TooltipButtonArrow, { position: position }), (0, jsx_runtime_1.jsx)("div", Object.assign({ className: "sbw-flex sbw-justify-between" }, { children: (0, jsx_runtime_1.jsx)("span", Object.assign({ className: "sbw-text-xs sbw-text-white" }, { children: text })) }))] })) }))] })));
}
exports.TooltipButton = TooltipButton;
