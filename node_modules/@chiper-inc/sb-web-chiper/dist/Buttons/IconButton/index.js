"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IconButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const Icon_1 = require("../../Theme/Icon");
const props_1 = require("./props");
const TooltipButton_1 = require("./TooltipButton");
/**
 * `IconButton` is a circular button component that hover over
 * it we can see a tooltip that indicates the function of the button.
 * You can also use it without the tooltip.
 *
 * #### Usage:
 *
 * ```tsx
  import { IconButton } from "@chiper-inc/sb-web-chiper";

  <IconButton icon="ArrowRight" />
 * ```
 *
 * #### Demo:
 */
function IconButton(_a) {
    var { icon, size = "medium", skinType = "primary", disabled = false, onClick = () => { }, className = "", tooltipText = "", positionTooltip = "right", dataTestId } = _a, rest = __rest(_a, ["icon", "size", "skinType", "disabled", "onClick", "className", "tooltipText", "positionTooltip", "dataTestId"]);
    return ((0, jsx_runtime_1.jsx)(TooltipButton_1.TooltipButton, Object.assign({ text: tooltipText, position: positionTooltip }, { children: (0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", disabled: disabled, onClick: onClick, "data-testid": dataTestId, className: `
        ${props_1.IconButtonSizes[size]}
        ${props_1.skinButton[skinType]}
        ${skinType === "outlined" ? "sbw-border" : "sbw-border-transparent"}
        sbw-inline-flex
        sbw-items-center
        sbw-justify-center
        sbw-whitespace-nowrap
        sbw-rounded-full
        sbw-p-1
        sbw-text-center
        sbw-font-sans
        sbw-leading-none
        ${className}
      ` }, rest, { children: (icon && icon !== "None") && ((0, jsx_runtime_1.jsx)("i", Object.assign({ role: "presentation", "data-testid": "button-icon" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: icon, size: size === "small" ? 16 : 22 }) }))) })) })));
}
exports.IconButton = IconButton;
