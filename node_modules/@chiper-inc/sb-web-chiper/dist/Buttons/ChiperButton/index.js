"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChiperButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Icon_1 = require("../../Theme/Icon");
const props_1 = require("./props");
const LoaderSpinner_1 = require("../../Feedback/LoaderSpinner");
/**
 * `ChiperButton` is an interactive element that allows users to trigger all
 * primary and secondary actions
 *
 * #### Usage:
 *
 * ```tsx
  import { ChiperButton } from "@chiper-inc/sb-web-chiper";

  <ChiperButton text="Label" uiType="primary" icon="Info" />
 * ```
 ***Note**: You can set the ChiperButton dimensions using `className` property. ExampÄºe:
 *
 * ```tsx
  import { ChiperButton } from "@chiper-inc/sb-web-chiper";

  <ChiperButton className="sbw-h-[65px] sbw-w-full" />
 * ```
 *
 * #### Demo:
 */
exports.ChiperButton = (0, react_1.memo)((_a) => {
    var { text, uiType = "primary", size = "medium", icon, disabled = false, onClick = () => { }, className = "", isLoading } = _a, rest = __rest(_a, ["text", "uiType", "size", "icon", "disabled", "onClick", "className", "isLoading"]);
    return ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", disabled: disabled, onClick: onClick, className: `
      sbw-group
      sbw-box-border
      sbw-flex
      sbw-items-center
      sbw-justify-center
      sbw-rounded-[4px]
      sbw-border
      sbw-transition-all
      ${props_1.uiTypeStyles[uiType].button}
      ${uiType !== "outlined" ? "sbw-border-transparent" : ""}
      ${uiType === "text" ? "sbw-h-fit sbw-p-0" : `sbw-py-2 sbw-px-4 ${props_1.sizeStyles[size].button}`}
      ${!isLoading ? props_1.uiTypeStyles[uiType].hovered : ""}
      ${className}
    ` }, rest, { children: isLoading
            ? (0, jsx_runtime_1.jsx)(LoaderSpinner_1.LoaderSpinner, Object.assign({}, props_1.loaderType[uiType]))
            : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [!!icon && ((0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: icon, color: props_1.uiTypeStyles[uiType].iconColor, size: props_1.sizeStyles[size].icon, className: `sbw-transition-all ${props_1.uiTypeStyles[uiType].iconClass}` })), (0, jsx_runtime_1.jsx)("div", Object.assign({ className: `
              sbw-font-bold
              sbw-leading-none
              sbw-transition-all
              ${props_1.sizeStyles[size].text}
              ${props_1.uiTypeStyles[uiType].text}
              ${uiType === "text" ? "sbw-pl-[8px] sbw-pr-[4px]" : "sbw-px-[8px]"}
            ` }, { children: text }))] })) })));
});
