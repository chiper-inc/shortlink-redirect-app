"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Button = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const deprecate_1 = require("../../Utils/deprecate");
const Colors_1 = __importDefault(require("../../Theme/Colors"));
const Icon_1 = require("../../Theme/Icon");
const props_1 = require("./props");
/**
 * ⚠️ Deprecated. DO NOT USE! Use `ChiperButton` instead.
 *
 * #### Usage:
 *
 * ```tsx
  import { Button } from "@chiper-inc/sb-web-chiper";

  <Button text="Label" />
 * ```
 *
 * #### Demo:
 * @deprecated
 */
function Button(_a) {
    var { text, skin = "primary", size = "medium", icon = "None", hasMinWidth = true, outlined = false, disabled = false, onClick = () => { }, className = "" } = _a, rest = __rest(_a, ["text", "skin", "size", "icon", "hasMinWidth", "outlined", "disabled", "onClick", "className"]);
    (0, deprecate_1.deprecate)({
        message: "Button is deprecated. Use ChiperButton instead.",
    });
    return ((0, jsx_runtime_1.jsxs)("button", Object.assign({ type: "button", disabled: disabled, onClick: onClick, className: `
        ${props_1.buttonSizes[size]}
        ${size === "small" ? "sbw-text-xs" : "sbw-text-base sbw-leading-5"}
        ${hasMinWidth ? "sbw-min-w-[112px]" : ""}
        ${disabled ? "sbw-opacity-50" : "sbw-opacity-100"}
        ${!disabled ? "hover:sbw-opacity-70" : ""}
        sbw-inline-flex
        sbw-items-center
        sbw-justify-center
        sbw-whitespace-nowrap
        sbw-rounded-md
        sbw-border
        sbw-border-transparent
        sbw-px-2
        sbw-py-1
        sbw-text-center
        sbw-font-sans
        sbw-font-bold
        sbw-leading-none
        ${className}
      `, style: {
            color: outlined ? props_1.buttonSkins[skin] : Colors_1.default.primary.white,
            background: outlined ? "transparent" : props_1.buttonSkins[skin],
            borderColor: outlined ? `${props_1.buttonSkins[skin]}4d` : "transparent",
        } }, rest, { children: [(icon && icon !== "None") && ((0, jsx_runtime_1.jsx)("i", Object.assign({ role: "presentation", "data-testid": "button-icon", className: "sbw-mr-[5px]" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: icon, color: outlined ? props_1.buttonSkins[skin] : Colors_1.default.primary.white, size: size === "small" ? 12 : 18 }) }))), text] })));
}
exports.Button = Button;
