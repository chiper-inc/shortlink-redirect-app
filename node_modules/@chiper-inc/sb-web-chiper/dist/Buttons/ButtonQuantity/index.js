"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonQuantity = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const buttonsInput_1 = require("./buttonsInput");
const modalMultipleQuantity_1 = require("./modalMultipleQuantity");
const useButtonQuantity_1 = require("./useButtonQuantity");
/**
 * A `ButtonQuantity` is a component that allows you to add and subtract quantities.
 *
 * #### Usage:
 *
 * ```tsx
  import { ButtonQuantity } from "@chiper-inc/sb-web-chiper";

  const [quantity, setQuantity] = useState(0)

  const onAction = (
    prevQuantity: number,
    newQuantity: number,
    correctQuantity:number,
    id:string,
    action: "ON_CLICK_TRASH" | "ON_CLICK_MINUS" | "ON_CLICK_PLUS" | "ON_CHANGE_INPUT"
  ) => {
    setQuantity(correctQuantity);
  };

  <ButtonQuantity
    id="C-1"
    quantity={0}
    maxQuantity={100}
    minQuantity={2}
    multipleQuantity={2}
    onAction={onAction}
    mode="tag"
  />
 * ```
 *
 * #### Demo:
 */
function ButtonQuantity(props) {
    const { id, multipleSelectTitle, multipleSelectSubTitle, showTag, openModalMultipleQuantity, auxQuantity, auxMinQuantity, auxMaxQuantity, auxMultipleQuantity, mode, setShowTag, handleClickTag, handleClickTrash, handleClickMinus, handleClickPlus, handleInputChange, handleInputFocusOrClick, handleSelectMultipleQuantity, handleCloseModalMultipleQuantity, } = (0, useButtonQuantity_1.useButtonQuantity)(Object.assign({}, props));
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-w-full", "data-testid": "testIdButtonQuantity" }, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ className: "sbw-flex sbw-h-full sbw-w-full sbw-flex-col" }, { children: (0, jsx_runtime_1.jsx)(buttonsInput_1.ButtonsInput, { quantity: auxQuantity, showTag: showTag, showTrash: auxQuantity <= auxMinQuantity, showPlus: auxQuantity < auxMaxQuantity, onClickTag: handleClickTag, onClickTrash: handleClickTrash, onClickMinus: handleClickMinus, onClickPlus: handleClickPlus, onChangeInput: handleInputChange, onClickInput: handleInputFocusOrClick, onFocusInput: handleInputFocusOrClick, setShowTag: setShowTag, mode: mode }) })), (0, jsx_runtime_1.jsx)(modalMultipleQuantity_1.ModalMultipleQuantity, { show: openModalMultipleQuantity, quantity: auxQuantity, minQuantity: auxMinQuantity, maxQuantity: auxMaxQuantity, multipleQuantity: auxMultipleQuantity, onSelect: handleSelectMultipleQuantity, onClose: handleCloseModalMultipleQuantity, multipleSelectTitle: multipleSelectTitle, multipleSelectSubTitle: multipleSelectSubTitle })] }), `QuantitySelector-${id}`));
}
exports.ButtonQuantity = ButtonQuantity;
