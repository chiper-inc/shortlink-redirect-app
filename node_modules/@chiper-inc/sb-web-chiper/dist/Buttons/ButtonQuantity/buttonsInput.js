"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonsInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Icon_1 = require("../../Theme/Icon");
const Colors_1 = __importDefault(require("../../Theme/Colors"));
const useEventsQueue_1 = __importDefault(require("../../Utils/useEventsQueue"));
const SIZE_ICONS = 24;
const display = (show) => (show ? "" : "sbw-invisible");
const dispatchWhenInputChange = (queue, event) => {
    const filteredQueue = queue.filter((item) => item.eventName === "changeQuantity");
    const last = filteredQueue[filteredQueue.length - 1];
    const isLast = (last === null || last === void 0 ? void 0 : last.id) === event.id;
    return isLast;
};
const dispatchWhenClickButtonsMinusOrPlus = (queue, event) => {
    const filteredQueue = queue.filter((item) => item.eventName === "clickButtonsMinusOrPlus");
    const last = filteredQueue[filteredQueue.length - 1];
    const isLast = (last === null || last === void 0 ? void 0 : last.id) === event.id;
    return isLast;
};
function ButtonsInput({ quantity, showTag, showTrash, showPlus, onClickTag, onClickPlus, onClickMinus, onClickTrash, onFocusInput, onChangeInput, mode, setShowTag, }) {
    const [openAuxInput, setOpenAuxInput] = (0, react_1.useState)(false);
    const [auxQuantity, setAuxQuantity] = (0, react_1.useState)(quantity);
    const { push } = (0, useEventsQueue_1.default)({ delay: 3000 });
    const handleClickMinus = () => {
        onClickMinus();
        push({
            eventName: "clickButtonsMinusOrPlus",
            data: null,
            event: () => { if (mode === "tag")
                setShowTag(true); },
            dispatchWhen: dispatchWhenClickButtonsMinusOrPlus,
        });
    };
    const handleClickPlus = () => {
        onClickPlus();
        push({
            eventName: "clickButtonsMinusOrPlus",
            data: null,
            event: () => { if (mode === "tag")
                setShowTag(true); },
            dispatchWhen: dispatchWhenClickButtonsMinusOrPlus,
        });
    };
    const handleInputChange = (event) => {
        const { value } = event.target;
        const newValue = parseInt(value, 10);
        const finalValue = Number.isNaN(newValue) ? 0 : newValue;
        setAuxQuantity(finalValue);
        push({
            eventName: "changeQuantity",
            data: finalValue,
            event: () => onChangeInput(finalValue),
            dispatchWhen: dispatchWhenInputChange,
            onSuccess: () => setOpenAuxInput(false),
        });
    };
    const handleInputFocus = () => {
        onFocusInput();
        setOpenAuxInput(true);
    };
    (0, react_1.useEffect)(() => {
        setAuxQuantity(quantity);
        setOpenAuxInput(false);
    }, [quantity]);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-flex sbw-w-full sbw-flex-row" }, { children: [showTag && quantity === 0 && ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: "sbw-flex sbw-w-full sbw-flex-col sbw-items-end sbw-justify-center" }, { children: (0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", onClick: onClickTag }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "PlusCircle", color: Colors_1.default.primary.green, size: SIZE_ICONS + 6, weight: "light" }) })) }))), showTag && quantity > 0 && ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: "sbw-flex sbw-w-full sbw-flex-col sbw-items-end sbw-justify-center" }, { children: (0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", className: "sbw-h-7 sbw-w-7 sbw-rounded-full sbw-bg-primary-green sbw-text-white", onClick: onClickTag }, { children: quantity })) }))), !showTag && ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-flex sbw-w-full sbw-flex-row sbw-justify-center sbw-gap-4" }, { children: [showTrash && ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", className: "sbw-flex sbw-flex-col sbw-items-center sbw-justify-center sbw-bg-white", onClick: onClickTrash }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "Trash", color: Colors_1.default.primary.green, size: SIZE_ICONS - 2, weight: "bold" }) }))), !showTrash && ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", className: "sbw-flex sbw-h-6 sbw-w-6 sbw-flex-col sbw-items-center sbw-justify-center sbw-rounded sbw-bg-primary-green sbw-p-1", onClick: handleClickMinus }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "Minus", color: Colors_1.default.primary.white, size: SIZE_ICONS, weight: "bold" }) }))), !openAuxInput && ((0, jsx_runtime_1.jsx)("input", { className: "sbw-w-17 sbw-rounded sbw-border sbw-border-gray-300 sbw-bg-white sbw-text-center sbw-text-xl sbw-font-normal sbw-leading-6 sbw-text-primary-yankeesBlue focus:sbw-outline-none", type: "number", inputMode: "numeric", value: quantity, onClick: handleInputFocus, onFocus: handleInputFocus, readOnly: true })), openAuxInput && ((0, jsx_runtime_1.jsx)("input", { className: "sbw-w-17 sbw-rounded sbw-border sbw-border-gray-300 sbw-bg-white sbw-text-center sbw-text-xl sbw-font-normal sbw-leading-6 sbw-text-primary-yankeesBlue focus:sbw-outline-none", type: "number", inputMode: "numeric", value: auxQuantity, onChange: handleInputChange })), (0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", className: `sbw-flex sbw-h-6 sbw-w-6 sbw-flex-col sbw-items-center sbw-justify-center sbw-rounded sbw-bg-primary-green sbw-p-1 ${display(showPlus)}`, onClick: handleClickPlus }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "Plus", color: Colors_1.default.primary.white, size: SIZE_ICONS, weight: "bold" }) }))] })))] })));
}
exports.ButtonsInput = ButtonsInput;
