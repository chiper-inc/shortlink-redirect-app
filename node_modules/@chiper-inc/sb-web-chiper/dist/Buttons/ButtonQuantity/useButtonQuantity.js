"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useButtonQuantity = void 0;
const react_1 = require("react");
const useButtonQuantity = ({ id, quantity, minQuantity, maxQuantity, multipleQuantity, onAction, mode, multipleSelectTitle, multipleSelectSubTitle, }) => {
    const [showTag, setShowTag] = (0, react_1.useState)(mode === "tag");
    const [openModalMultipleQuantity, setOpenModalMultipleQuantity] = (0, react_1.useState)(false);
    const [auxQuantity, setAuxQuantity] = (0, react_1.useState)(quantity);
    const auxMultipleQuantity = multipleQuantity || 1;
    const auxMinQuantity = minQuantity || 1;
    const auxMaxQuantity = maxQuantity || 1000000;
    const handleClickTag = () => {
        if (auxQuantity < auxMinQuantity)
            setAuxQuantity(auxMinQuantity);
        setShowTag(false);
    };
    const handleClickTrash = () => {
        setAuxQuantity(0);
        if (mode === "tag")
            setShowTag(true);
        if (onAction)
            onAction(auxQuantity, 0, 0, id, "ON_CLICK_TRASH");
    };
    const handleClickMinus = () => {
        const newQuantity = auxQuantity - auxMultipleQuantity;
        const correctQuantity = newQuantity >= auxMinQuantity ? newQuantity : auxMinQuantity;
        if (onAction) {
            setAuxQuantity(correctQuantity);
            onAction(auxQuantity, newQuantity, correctQuantity, id, "ON_CLICK_MINUS");
        }
    };
    const handleClickPlus = () => {
        const newQuantity = auxQuantity + auxMultipleQuantity;
        const correctQuantity = newQuantity <= auxMaxQuantity ? newQuantity : auxMaxQuantity;
        if (onAction) {
            setAuxQuantity(correctQuantity);
            onAction(auxQuantity, newQuantity, correctQuantity, id, "ON_CLICK_PLUS");
        }
    };
    const handleInputChange = (newQuantity) => {
        if (onAction) {
            if (newQuantity < auxMinQuantity) {
                setAuxQuantity(auxMinQuantity);
                if (mode === "tag")
                    setShowTag(true);
                onAction(auxQuantity, newQuantity, auxMinQuantity, id, "ON_CHANGE_INPUT");
                setOpenModalMultipleQuantity(false);
                return;
            }
            if (newQuantity > auxMaxQuantity) {
                setAuxQuantity(auxMaxQuantity);
                if (mode === "tag")
                    setShowTag(true);
                onAction(auxQuantity, newQuantity, auxMaxQuantity, id, "ON_CHANGE_INPUT");
                setOpenModalMultipleQuantity(false);
                return;
            }
            setAuxQuantity(newQuantity);
            if (mode === "tag")
                setShowTag(true);
            onAction(auxQuantity, newQuantity, newQuantity, id, "ON_CHANGE_INPUT");
        }
        setOpenModalMultipleQuantity(false);
    };
    const handleInputFocusOrClick = () => {
        if (auxMultipleQuantity > 1) {
            setOpenModalMultipleQuantity(true);
        }
    };
    const handleSelectMultipleQuantity = (newQuantity) => {
        if (onAction) {
            setAuxQuantity(newQuantity);
            if (mode === "tag")
                setShowTag(true);
            onAction(auxQuantity, newQuantity, newQuantity, id, "ON_CHANGE_INPUT");
        }
        setOpenModalMultipleQuantity(false);
    };
    const handleCloseModalMultipleQuantity = () => {
        setOpenModalMultipleQuantity(false);
    };
    return {
        id,
        quantity,
        multipleSelectTitle,
        multipleSelectSubTitle,
        showTag,
        openModalMultipleQuantity,
        auxQuantity,
        auxMinQuantity,
        auxMaxQuantity,
        auxMultipleQuantity,
        mode,
        setShowTag,
        handleClickTag,
        handleClickTrash,
        handleClickMinus,
        handleClickPlus,
        handleInputChange,
        handleInputFocusOrClick,
        handleSelectMultipleQuantity,
        handleCloseModalMultipleQuantity,
    };
};
exports.useButtonQuantity = useButtonQuantity;
exports.default = exports.useButtonQuantity;
