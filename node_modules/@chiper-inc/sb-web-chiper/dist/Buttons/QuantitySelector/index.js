"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuantitySelector = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Icon_1 = require("../../Theme/Icon");
const Colors_1 = __importDefault(require("../../Theme/Colors"));
const debounce_1 = __importDefault(require("../../Utils/debounce/debounce"));
/**
 * A `QuantitySelector` is a component that allows you to add and subtract quantities.
 *
 * #### Usage:
 *
 * ```tsx
  import { QuantitySelector } from "@chiper-inc/sb-web-chiper";

  const [quantity, setQuantity] = useState(0)

  <QuantitySelector maxQuantiy={1000} {...{ quantity, setQuantity }} />
 * ```
 *
 * #### Demo:
 */
function QuantitySelector({ maxQuantiy, minQuantity, quantity, setQuantity, }) {
    const [value, setValue] = (0, react_1.useState)(quantity);
    const debounce = (0, debounce_1.default)(value, 500);
    const isMinQuantityActived = (minQuantity && ((debounce <= minQuantity) || !debounce));
    const isMinusActive = () => isMinQuantityActived || (!debounce && minQuantity);
    const handleChange = (e) => {
        const inputValue = parseInt(e.target.value, 10);
        setValue(inputValue);
    };
    const handleChangeMinQuantity = () => {
        const isMin = minQuantity && debounce === minQuantity;
        return setValue((prev) => (isMin ? minQuantity : Math.max(prev - 1, 0)));
    };
    (0, react_1.useEffect)(() => {
        if (debounce === 0 || !debounce || isMinQuantityActived) {
            if (isMinQuantityActived) {
                setValue(minQuantity);
                setQuantity(minQuantity);
            }
            else {
                setValue(0);
                setQuantity(0);
            }
        }
        else if (debounce > maxQuantiy) {
            setValue(maxQuantiy);
            setQuantity(maxQuantiy);
        }
        else {
            setQuantity(debounce);
        }
    }, [debounce, maxQuantiy, minQuantity, isMinQuantityActived, setQuantity]);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-grid\n      sbw-h-9\n      sbw-w-28\n      sbw-grid-cols-3\n      sbw-content-center\n      sbw-justify-items-center\n      sbw-gap-4 sbw-rounded\n      sbw-border\n      sbw-border-greyscale-gray60\n      sbw-bg-white\n      sbw-p-2", "data-testid": "quantity-selector" }, { children: [(0, jsx_runtime_1.jsx)("button", Object.assign({ "data-testid": "quantity-minus", type: "button", className: `sbw-self-center sbw-rounded sbw-p-1 ${isMinusActive() ? "sbw-bg-primary-white" : "sbw-bg-primary-green"}`, onClick: handleChangeMinQuantity, disabled: !minQuantity && value === 0 }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: isMinQuantityActived ? "Trash" : "Minus", color: Colors_1.default.primary[isMinusActive() ? "green" : "white"], size: isMinusActive() ? 19 : 11, weight: "bold" }) })), (0, jsx_runtime_1.jsx)("input", { "data-testid": "quantity-input", type: "number", className: "sbw-m-0 sbw-w-11 sbw-p-0 sbw-text-center sbw-text-black focus:sbw-outline-none", value: value, onChange: handleChange }), (0, jsx_runtime_1.jsx)("button", Object.assign({ "data-testid": "quantity-add", type: "button", className: "sbw-self-center sbw-rounded sbw-bg-primary-green sbw-p-1", onClick: () => setValue((prev) => Math.min(prev + 1, maxQuantiy)), disabled: value === maxQuantiy }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "Plus", color: Colors_1.default.primary.white, size: 11, weight: "bold" }) }))] })));
}
exports.QuantitySelector = QuantitySelector;
