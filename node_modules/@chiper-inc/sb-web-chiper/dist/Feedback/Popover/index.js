"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Popover = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Typography_1 = require("../../Theme/Typography");
/**
 * A `Popover` Popovers are used to display additional contextual information.
 *
 * #### Usage:
 *
 * ```tsx
  import { Popover } from "@chiper-inc/sb-web-chiper";

  <Popover
    description={'Popover description'}
    position={'down'}
    variant={'light'}
  >
    <span>Popover Example</span>
  </Popover>
 * ```
 *
 * #### Demo:
 */
function Popover({ children, description, position = "down", variant = "dark", }) {
    const [show, setShow] = (0, react_1.useState)();
    const [centerPosition, setCenterPosition] = (0, react_1.useState)({});
    const popover = (0, react_1.useRef)(null);
    const VARIANT_STYLE = {
        light: { bg: "sbw-bg-primary-white", fontColor: "yankeesBlue" },
        dark: { bg: "sbw-bg-primary-yankeesBlue", fontColor: "white" },
    };
    const findPosition = {
        up: "sbw-bottom-full",
        down: "sbw-top-full",
        left: "sbw-right-full",
        right: "sbw-left-full",
    };
    const calcPosition = (0, react_1.useCallback)((value, property) => {
        const midValue = value / 2;
        setCenterPosition({ [property]: `calc(50% - ${midValue + 3}px)` });
    }, []);
    const centerPopover = (0, react_1.useCallback)(() => {
        if (popover.current) {
            const { height, width } = popover.current.getBoundingClientRect();
            if (position === "up" || position === "down")
                calcPosition(width, "left");
            if (position === "left" || position === "right")
                calcPosition(height, "top");
        }
    }, [position, calcPosition]);
    (0, react_1.useLayoutEffect)(centerPopover, [centerPopover, description, children]);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-relative", onMouseLeave: () => setShow(false) }, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ onMouseEnter: () => setShow(true) }, { children: children })), (0, jsx_runtime_1.jsx)("div", Object.assign({ ref: popover, "data-testid": "popover", style: centerPosition, className: `
          sbw-absolute
          sbw-z-50
          sbw-m-auto
          sbw-h-max
          sbw-w-max
          sbw-p-2
          sbw-transition-all
          ${findPosition[position]}
          ${show
                    ? "sbw-visible sbw-opacity-100"
                    : "sbw-invisible sbw-opacity-0"}
        ` }, { children: (0, jsx_runtime_1.jsx)("div", Object.assign({ className: `sbw-relative sbw-rounded sbw-px-3 sbw-py-1 ${VARIANT_STYLE[variant].bg}` }, { children: (0, jsx_runtime_1.jsx)(Typography_1.Typography, Object.assign({ variant: "label", color: VARIANT_STYLE[variant].fontColor }, { children: description })) })) }))] })));
}
exports.Popover = Popover;
