"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tooltip = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Icon_1 = require("../../Theme/Icon");
const Slider_1 = require("./Slider");
const Tag_1 = require("../../Display/Tag");
const TooltipArrow_1 = require("./TooltipArrow");
/**
 * A `Tooltip` is a floating message that clarifies some information
 *
 * #### Usage:
 *
 * ```tsx
  import { Tooltip } from "@chiper-inc/sb-web-chiper";

  <Tooltip
    title={'Tooltip title'}
    description={'Tooltip description'}
    position={'down'}
  >
    <span>Tooltip Example</span>
  </Tooltip>
 * ```
 *
 * #### Demo:
 */
function Tooltip({ children, description, position = "down", title, close = false, tag, titleClass, tagClass, modeDark = false, }) {
    const [show, setShow] = (0, react_1.useState)();
    const [centerPosition, setCenterPosition] = (0, react_1.useState)({});
    const tooltip = (0, react_1.useRef)(null);
    const calcPosition = (0, react_1.useCallback)((value, property) => {
        const midValue = value / 2;
        setCenterPosition({ [property]: `calc(50% - ${midValue + 3}px)` });
    }, []);
    const centerTooltip = (0, react_1.useCallback)(() => {
        if (tooltip.current) {
            const { height, width } = tooltip.current.getBoundingClientRect();
            if (position === "up" || position === "down")
                calcPosition(width, "left");
            if (position === "left" || position === "right")
                calcPosition(height, "top");
        }
    }, [position, calcPosition]);
    (0, react_1.useLayoutEffect)(centerTooltip, [centerTooltip, children, title, description]);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-relative", onMouseLeave: () => setShow(false) }, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ onMouseEnter: () => setShow(true) }, { children: children })), (0, jsx_runtime_1.jsx)("div", Object.assign({ ref: tooltip, "data-testid": "tooltip", style: centerPosition, className: `
          sbw-absolute
          sbw-z-50
          sbw-m-auto
          sbw-h-max
          sbw-w-max
          sbw-p-2
          sbw-transition-all
          ${position === "up" ? "sbw-bottom-[100%]" : null}
          ${position === "down" ? "sbw-top-[100%]" : null}
          ${position === "left" ? "sbw-right-[100%]" : null}
          ${position === "right" ? "sbw-left-[100%]" : null}
          ${show ? "sbw-visible sbw-opacity-100" : "sbw-invisible sbw-opacity-0"}
        ` }, { children: (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: `
          sbw-relative
          sbw-h-full
          sbw-rounded
          ${modeDark ? "sbw-bg-primary-yankeesBlue" : "sbw-bg-white"}
          sbw-p-4
          sbw-shadow-[1px_1px_12px_0px_rgba(0,0,0,0.2)]` }, { children: [(0, jsx_runtime_1.jsx)(TooltipArrow_1.TooltipArrow, { position: position, modeDark: modeDark }), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-flex sbw-justify-between sbw-gap-2.5" }, { children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("span", Object.assign({ className: `sbw-text-lg sbw-font-bold ${titleClass} ${modeDark ? "sbw-text-white" : "sbw-text-primary-yankeesBlue"}` }, { children: title || "" })), tag && ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: `sbw-ml-2 sbw-inline-block ${tagClass}` }, { children: (0, jsx_runtime_1.jsx)(Tag_1.Tag, { skin: "warning", text: tag }) })))] }), close && ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", className: `sbw-border-0 ${modeDark ? "sbw-text-white" : "sbw-text-primary-yankeesBlue"}`, onClick: () => setShow(false) }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "X", size: 16 }) })))] })), description instanceof Array ? ((0, jsx_runtime_1.jsx)(Slider_1.Slide, Object.assign({ modeDark: modeDark }, { children: description }))) : ((0, jsx_runtime_1.jsx)("span", Object.assign({ className: `sbw-text-sm ${modeDark ? "sbw-text-white" : "sbw-text-primary-yankeesBlue"}` }, { children: description })))] })) }))] })));
}
exports.Tooltip = Tooltip;
