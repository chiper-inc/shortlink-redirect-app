"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Toast = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Icon_1 = require("../../Theme/Icon");
const Colors_1 = __importDefault(require("../../Theme/Colors"));
const Typography_1 = require("../../Theme/Typography");
const iconProps = {
    negative: { name: "WarningCircle", color: Colors_1.default.primary.chiperBrandRed },
    positive: { name: "CheckCircle", color: Colors_1.default.primary.green },
    informative: { name: "Info", color: Colors_1.default.secondary.bleuDeFrance },
    attentive: { name: "Warning", color: Colors_1.default.secondary.visionaria },
};
const borderStyle = "sbw-border-l-4 sbw-border-solid";
const borderToast = {
    negative: `${borderStyle} sbw-border-primary-chiperBrandRed`,
    positive: `${borderStyle} sbw-border-primary-green`,
    informative: `${borderStyle} sbw-border-secondary-bleuDeFrance`,
    attentive: `${borderStyle} sbw-border-secondary-visionaria`,
};
/**
 *`Toasts` are used to provide users with brief, snackable notifications or messages
 * that appear and disappear quickly, often at the bottom or top of the screen.
 * They're used to communicate important but not critical information, such as
 * successful actions, errors, or warnings, without interrupting the user's
 * flow or requiring them to take immediate action.
 *
 * #### Usage:
 *
 * ```tsx
  import { Toast, Theme } from "@chiper-inc/sb-web-chiper";

  <Toast
    title="El titulo"
    body="Lorem psum......"
    className="sbw-fixed sbw-top-8"
  />
 * ```
 *
 ***Note**: You can set the Toast position using `className` property
 *
 * #### Demo:
 */
exports.Toast = (0, react_1.memo)(({ type = "neutral", title, body, actionText, onActionTextClick = () => { }, hideCloseIcon, onCloseClick = () => { }, className = "", children, }) => {
    const isNeutral = type === "neutral";
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ "data-testid": "chiper-toast", className: `
        sbw-box-border
        sbw-flex
        sbw-w-[328px]
        sbw-gap-x-[8px]
        sbw-rounded-[4px]
        sbw-bg-primary-yankeesBlue
        sbw-py-3
        ${!isNeutral ? "sbw-px-3" : "sbw-pl-4 sbw-pr-3"}
        ${!isNeutral ? borderToast[type] : ""}
        ${className}
      ` }, { children: [!isNeutral && (0, jsx_runtime_1.jsx)(Icon_1.Icon, Object.assign({}, iconProps[type], { weight: "fill", size: 16 })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-flex sbw-flex-1 sbw-flex-col sbw-justify-items-center sbw-gap-y-[8px]" }, { children: [!!title && ((0, jsx_runtime_1.jsx)(Typography_1.Typography, Object.assign({ variant: "body", bold: true, color: "white" }, { children: title }))), body && ((0, jsx_runtime_1.jsx)(Typography_1.Typography, Object.assign({ variant: "mediumbody", color: "white" }, { children: body }))), children, actionText && ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", onClick: onActionTextClick, className: "sbw-w-fit", "data-testid": "chiper-toast-action-text" }, { children: (0, jsx_runtime_1.jsx)(Typography_1.Typography, Object.assign({ variant: "label", bold: true, color: "green", as: "p" }, { children: actionText })) })))] })), !hideCloseIcon && ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", onClick: onCloseClick, className: "sbw-h-fit", "data-testid": "chiper-toast-close" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "X", size: 16, color: Colors_1.default.primary.white }) })))] })));
});
