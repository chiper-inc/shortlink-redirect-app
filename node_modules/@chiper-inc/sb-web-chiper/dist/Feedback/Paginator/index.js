"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Paginator = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const Icon_1 = require("../../Theme/Icon");
const Colors_1 = __importDefault(require("../../Theme/Colors"));
const MIN_PAGES = 5;
const ELLIPSIS_VALUE = -1;
const itemClass = `
  sbw-w-[32px]
  sbw-h-[32px]
  sbw-box-border
  sbw-flex
  sbw-items-center
  sbw-justify-center
  sbw-bg-primary-white
  sbw-text-[14px]
  sbw-leading-none
  sbw-rounded
  sbw-border-[1px]
  sbw-border-solid
  sbw-transition-all
  hover:[&:not(:disabled)]:sbw-border-primary-green
`;
const arrowClass = "sbw-border-greyscale-gray25 disabled:sbw-bg-greyscale-gray5 disabled:sbw-border-transparent";
/**
 * `Paginator` is used to divide a large set of data or content into smaller,
 * more manageable chunks, usually displayed as separate pages. Pagination helps
 * users to navigate through content efficiently and can improve page loading times,
 *  as only a portion of the content is loaded at a time.
 *
 * #### Usage:
 *
 * ```tsx
  import { Paginator } from "@chiper-inc/sb-web-chiper";

  const [page, setPage] = useState(1);

  <Paginator
    currentPage={page}
    totalPages={99}
    onChangePage={(newPage) => setPage(newPage)}
  />
 * ```
 * **Note**: The minimum number of pages displayed by the Paginator is 5.
 * If the value of `maxPagesToDisplay` is less than 5, it will be ignored.
 *
 * #### Demo:
 */
function Paginator({ currentPage, onChangePage, totalPages, maxPagesToDisplay = MIN_PAGES, "data-testid": testID = "chiper-paginator", }) {
    const itemsQuantity = maxPagesToDisplay <= MIN_PAGES ? MIN_PAGES : maxPagesToDisplay;
    const getPages = () => {
        const pages = new Array(totalPages).fill(0).map((_, index) => index + 1);
        if (totalPages <= itemsQuantity)
            return pages;
        const base = Math.floor(itemsQuantity / 2);
        const extraCellForPairNumbers = itemsQuantity % 2 === 0 ? 1 : 0;
        if (currentPage < base || currentPage === base + 1) {
            return [
                ...pages.slice(0, base + 1),
                ELLIPSIS_VALUE,
                ...pages.slice(totalPages - base + extraCellForPairNumbers + 1),
            ];
        }
        if (currentPage > totalPages - base) {
            return [
                ...pages.slice(0, base - 1),
                ELLIPSIS_VALUE,
                ...pages.slice(totalPages - base + extraCellForPairNumbers - 1),
            ];
        }
        if (currentPage === base) {
            return [
                ...pages.slice(0, base + 1),
                ELLIPSIS_VALUE,
                ...pages.slice(-base + 1 + extraCellForPairNumbers),
            ];
        }
        if (currentPage > base && currentPage < totalPages - base) {
            return [
                1,
                ELLIPSIS_VALUE,
                ...pages.slice(currentPage - ((itemsQuantity - 4) / 2), currentPage + ((itemsQuantity - 4) / 2)),
                ELLIPSIS_VALUE,
                totalPages,
            ];
        }
        return [
            ...pages.slice(0, base - 1 - extraCellForPairNumbers),
            ELLIPSIS_VALUE,
            ...pages.slice(-base - 1),
        ];
    };
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "sbw-flex sbw-gap-x-[8px]", "data-testid": testID }, { children: [(0, jsx_runtime_1.jsx)("button", Object.assign({ className: `${itemClass} ${arrowClass}`, type: "button", onClick: () => onChangePage(currentPage - 1), disabled: currentPage <= 1, "data-testid": "chiper-paginator-back-button" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "CaretLeft", size: 16, color: currentPage <= 1 ? Colors_1.default.greyscale.gray100 : Colors_1.default.primary.yankeesBlue }) })), getPages().map((page, i) => ((0, jsx_runtime_1.jsx)("button", Object.assign({ type: "button", className: `
            ${itemClass}
            ${page === currentPage
                    ? "sbw-border-primary-green sbw-text-primary-green"
                    : "sbw-border-greyscale-gray25 sbw-text-primary-darkBlueGray"}
          `, "data-testid": `chiper-paginator-page-${page}`, onClick: () => onChangePage(page), disabled: page === ELLIPSIS_VALUE || page === currentPage }, { children: page === ELLIPSIS_VALUE ? "..." : page }), `chiper-paginator-page-${page}-${i + 0}-${testID}`))), (0, jsx_runtime_1.jsx)("button", Object.assign({ className: `${itemClass} ${arrowClass}`, type: "button", onClick: () => onChangePage(currentPage + 1), disabled: currentPage >= totalPages, "data-testid": "chiper-paginator-next-button" }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "CaretRight", size: 16, color: currentPage >= totalPages ? Colors_1.default.greyscale.gray100 : Colors_1.default.primary.yankeesBlue }) }))] })));
}
exports.Paginator = Paginator;
