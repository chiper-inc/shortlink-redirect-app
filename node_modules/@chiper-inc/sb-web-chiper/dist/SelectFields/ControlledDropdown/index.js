"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlledDropdown = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("react");
const DropdownListItem_1 = require("../Dropdowns/DropdownListItem");
const Button_1 = require("../../Buttons/Button");
const DropdownWrapper_1 = require("../Dropdowns/DropdownWrapper");
const utils_1 = require("../Dropdowns/utils");
/**
 * A `ControlledDropdown` is a component that allows select a multiple items
 *
 * #### Interface:
 *
 * ```tsx
  export interface IDropdownItem {
    value: string;
    text: string;
    subItems?: IDropdownItem[];
  }
 * ```
 *
 * #### Usage:
 *
 * ```tsx
  import { ControlledDropdown } from "@chiper-inc/sb-web-chiper";

  const [values, setValues] = useState<string[]>([]);

  const handleConfirmationClick = useCallback((itemValues: string[]) => {
    setValues(itemValues);
  }, []);

  <ControlledDropdown
    items={[
      {
        text: "Item 1",
        value: "123",
        subItems: [
          { text: "Sub Item 1-2", value: "124" },
          { text: "Sub Item 1-3", value: "125" },
        ],
      },
      {
        text: "Item 2",
        value: "126"
      },
      {
        text: "Item 3",
        value: "127"
      },
      {
        text: "Item 4",
        value: "10",
        subItems: [
          { text: "Sub Item 4-1", value: "121" },
          { text: "Sub Item 4-2", value: "1220" },
          { text: "Sub Item 4-3", value: "1203" },
          { text: "Sub Item 4-4", value: "1202" },

        ],
      },
      {
        text: "Item 5",
        value: "17"
      },
    ]}
    leftButtonText="Cancelar"
    rightButtonText="Confirmar"
    onConfimationClick={handleConfirmationClick}
  />
 * ```
 *
 * #### Demo:
 */
function ControlledDropdown({ items, onConfimationClick, onCancelClick = () => { }, selectedValues = [], width = "normal", maxHeight = "460px", leftButtonText, rightButtonText, }) {
    const [checkedValues, setCheckedValues] = (0, react_2.useState)(selectedValues);
    const isSelected = (0, react_2.useCallback)((itemValue) => (checkedValues.includes(itemValue)), [checkedValues]);
    const onItemClick = (0, react_2.useCallback)((itemValue) => {
        setCheckedValues((prev) => (prev.includes(itemValue)
            ? prev.filter((e) => e !== itemValue)
            : [...prev, itemValue]));
    }, []);
    const handleConfirmationClick = (0, react_2.useCallback)(() => {
        onConfimationClick(checkedValues);
    }, [checkedValues, onConfimationClick]);
    const handleCancelClick = (0, react_2.useCallback)(() => {
        setCheckedValues([]);
        onCancelClick();
    }, [onCancelClick]);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: `sbw-flex sbw-flex-col ${(0, utils_1.getDropdownWidthClass)(width)}` }, { children: [(0, jsx_runtime_1.jsx)(DropdownWrapper_1.DropdownWrapper, Object.assign({ width: width, maxHeight: maxHeight }, { children: items.map((item, i) => ((0, react_1.createElement)(DropdownListItem_1.DropdownListItem, Object.assign({}, item, { type: "checkbox", key: `dropdown-item-${item.text + i}`, isSelected: isSelected, onClick: onItemClick })))) })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "\n          sbw-flex\n          sbw-w-full\n          sbw-justify-end\n          sbw-gap-x-[12px]\n          sbw-p-[12px]\n        " }, { children: [(0, jsx_runtime_1.jsx)(Button_1.Button, { skin: "dark", text: leftButtonText, outlined: true, className: "sbw-rounded-[4px] sbw-font-bold", size: "small", onClick: handleCancelClick }), (0, jsx_runtime_1.jsx)(Button_1.Button, { text: rightButtonText, className: "sbw-rounded-[4px] sbw-font-bold", size: "small", onClick: handleConfirmationClick })] }))] })));
}
exports.ControlledDropdown = ControlledDropdown;
