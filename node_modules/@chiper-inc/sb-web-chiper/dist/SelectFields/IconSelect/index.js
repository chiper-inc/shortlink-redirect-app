"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IconSelect = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Icon_1 = require("../../Theme/Icon");
const props_1 = require("./props");
/**
 * The `IconSelect` is a reusable component that provides
 * a Icon button with an associated dropdown menu.

 *
 * #### Usage:
 *
 * ```tsx
  import {IconSelect} from "@chiper-inc/sb-web-chiper"

  const [status, setStatus] = useState("");

  return (
    <div className={CONTAINER_CLASSES}>
      <ComponentItem {...args} setValue={setStatus} actived={!!status} />
    </div>
  );
};
 * ```
 *
 * #### Demo:
 */
function IconSelect(_a) {
    var { label, items, className, size = "medium", disabled = false, setValue, actived, iconName } = _a, rest = __rest(_a, ["label", "items", "className", "size", "disabled", "setValue", "actived", "iconName"]);
    const [isOpen, setIsOpen] = (0, react_1.useState)(false);
    const ref = (0, react_1.useRef)(null);
    function handleEscapeKey(event) {
        if (event.code === "Escape") {
            setIsOpen(false);
        }
    }
    function handleClickOutside(event) {
        const currentTarget = event.target;
        if (ref.current && !ref.current.contains(currentTarget)) {
            setIsOpen(false);
        }
    }
    (0, react_1.useEffect)(() => {
        document.addEventListener("keydown", handleEscapeKey);
        document.addEventListener("mousedown", handleClickOutside);
        return () => {
            document.removeEventListener("keydown", handleEscapeKey);
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, []);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({}, rest, { ref: ref, className: `
        sbw-relative
        ${className}
      ` }, { children: [(0, jsx_runtime_1.jsxs)("button", Object.assign({ type: "button", onClick: () => setIsOpen(!isOpen), disabled: disabled, "data-testid": "select-button", className: `
          sbw-group
          sbw-flex
          sbw-cursor-pointer
          sbw-items-center
          sbw-gap-2
          sbw-rounded
          sbw-px-4
          hover:sbw-bg-greyscale-gray5
          focus-visible:sbw-outline
          focus-visible:sbw-outline-2
          focus-visible:-sbw-outline-offset-2
          focus-visible:sbw-outline-secondary-brightYellow
          disabled:sbw-cursor-not-allowed
          disabled:sbw-bg-greyscale-gray25
          ${props_1.filtersSizesStyles[size].button}
          ${actived ? "sbw-bg-greyscale-gray5" : "sbw-bg-white"}
        ` }, { children: [(0, jsx_runtime_1.jsx)("span", Object.assign({ className: "\n            sbw-relative\n            sbw-text-primary-yankeesBlue\n            group-disabled:sbw-text-greyscale-gray200\n          " }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { weight: actived ? "fill" : "light", name: iconName, size: props_1.filtersSizesStyles[size].icon }) })), label && ((0, jsx_runtime_1.jsx)("span", Object.assign({ className: `
              sbw-text-primary-yankeesBlue
              group-disabled:sbw-text-greyscale-gray200
              ${props_1.filtersSizesStyles[size].text}
            ` }, { children: label })))] })), isOpen && ((0, jsx_runtime_1.jsx)("div", Object.assign({ "data-testid": "dropdown", className: "sbw-absolute sbw-top-full sbw-w-80 sbw-shadow-sm" }, { children: items.map((item, index) => ((0, jsx_runtime_1.jsxs)("div", Object.assign({ role: "presentation", "data-testid": `dropdown-item-${index}`, className: ` sbw-flex
              sbw-min-h-11
              sbw-w-full
              sbw-items-center
              sbw-bg-white
              sbw-px-5
              sbw-py-2
              hover:sbw-bg-primary-ghostWhite
            `, onClick: () => {
                        setValue(item.value);
                        setIsOpen(false);
                    } }, { children: [!!item.color && ((0, jsx_runtime_1.jsx)("div", { className: `sbw-mr-2 sbw-h-3 sbw-w-3 sbw-rounded-full ${item.color}` })), item.label] })))) })))] })));
}
exports.IconSelect = IconSelect;
