"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropdownListItem = void 0;
const react_1 = require("react");
const jsx_runtime_1 = require("react/jsx-runtime");
const react_2 = require("react");
const Icon_1 = require("../../../Theme/Icon");
const Typography_1 = require("../../../Theme/Typography");
const Checkbox_1 = require("../../../Form/Checkbox");
exports.DropdownListItem = (0, react_2.memo)(({ type, isSubItem, text, value, icon, subItems, isSelected, onClick, }) => {
    const [showSubItems, setShowSubItems] = (0, react_2.useState)(false);
    const handleClick = () => {
        if (subItems)
            setShowSubItems((prev) => !prev);
        else
            onClick(value);
    };
    const getBackground = () => ((showSubItems || (isSelected(value) && type === "simple"))
        ? "sbw-bg-primary-ghostWhite"
        : "sbw-bg-primary-white");
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)("button", Object.assign({ type: "button", className: `
          sbw-flex
          sbw-h-[44px]
          sbw-min-h-[44px]
          sbw-animate-dropdown-options
          sbw-items-center
          sbw-gap-x-[8px]
          sbw-bg-primary-white
          sbw-transition-all
          hover:sbw-bg-primary-ghostWhite
          ${isSubItem ? "sbw-px-[56px] sbw-pr-8" : "sbw-px-4"}
          ${getBackground()}
        `, onClick: handleClick }, { children: [(!subItems && type !== "simple") && ((0, jsx_runtime_1.jsx)(Checkbox_1.Checkbox, { type: type, checked: isSelected(value), onChange: handleClick })), (!!icon && type === "simple") && (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: icon, size: 16 }), (0, jsx_runtime_1.jsx)("div", Object.assign({ className: "\n          sbw-h-[20px]\n          sbw-flex-1\n          sbw-translate-y-[-3px]\n          sbw-break-all\n          sbw-text-left\n          sbw-line-clamp-1" }, { children: (0, jsx_runtime_1.jsx)(Typography_1.Typography, Object.assign({ variant: "body" }, { children: text })) })), (!!subItems && ((0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: showSubItems ? "CaretUp" : "CaretDown", size: 16 })))] })), showSubItems && (subItems === null || subItems === void 0 ? void 0 : subItems.map((subItem, i) => ((0, react_1.createElement)(exports.DropdownListItem, Object.assign({}, subItem, { type: type, isSubItem: true, key: `dropdown-subItems-${text}-${subItem.text + i}`, isSelected: isSelected, onClick: onClick })))))] }));
});
