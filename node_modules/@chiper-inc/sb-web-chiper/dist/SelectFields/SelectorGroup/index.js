"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectorGroup = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Icon_1 = require("../../Theme/Icon");
/**
 * `SelectorGroup` provides a group container for selectable items.
 * It allows you to group related options together and toggle
 * the visibility of the item list when interacting with a button
 *
 * #### Usage:
 *
 * ```tsx
  import { SelectorGroup, SelectorItem } from "@chiper-inc/sb-web-chiper";

  <SelectorGroup groupName="Status">
    <SelectorItem name="status" label="Pending" type="radio" />
    <SelectorItem name="status" label="Active" type="radio" />
    <SelectorItem name="status" label="Canceled" type="radio" />
  </SelectorGroup>
 * ```
 *
 * #### Demo:
 */
function SelectorGroup(_a) {
    var { groupName, children, className, disabled = false, maxHeight = "20rem" } = _a, rest = __rest(_a, ["groupName", "children", "className", "disabled", "maxHeight"]);
    const [showGroup, setShowGroup] = (0, react_1.useState)(false);
    const childrenWithProps = react_1.Children.map(children, (child) => ((0, react_1.cloneElement)(child, {
        className: `sbw-pl-14 ${child.props.className}`,
        onFocus: () => setShowGroup(true),
        disabled,
    })));
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({}, rest, { className: className }, { children: [(0, jsx_runtime_1.jsxs)("button", Object.assign({ type: "button", onClick: () => setShowGroup((prevShowGroup) => !prevShowGroup), disabled: disabled, className: `
          sbw-group
          sbw-flex
          sbw-min-h-11
          sbw-w-full
          sbw-flex-1
          sbw-items-center
          sbw-justify-between
          sbw-gap-x-2
          sbw-bg-primary-white
          sbw-px-4
          sbw-text-primary-yankeesBlue
          hover:sbw-bg-primary-ghostWhite
          focus-visible:sbw-outline
          focus-visible:sbw-outline-2
          focus-visible:-sbw-outline-offset-2
          focus-visible:sbw-outline-secondary-brightYellow
          disabled:sbw-cursor-not-allowed
          disabled:sbw-text-greyscale-gray60
        ` }, { children: [(0, jsx_runtime_1.jsx)("span", Object.assign({ className: "sbw-text-left sbw-text-base sbw-leading-5 sbw-line-clamp-1" }, { children: groupName })), (0, jsx_runtime_1.jsx)("span", Object.assign({ className: "\n          sbw-text-primary-yankeesBlue\n          group-disabled:sbw-text-greyscale-gray60\n          " }, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { name: "CaretDown", size: 16, className: `
              ${showGroup ? "-sbw-rotate-180" : "sbw-rotate-0"}
              sbw-transition-transform
              sbw-duration-200
              sbw-ease-in-out
            ` }) }))] })), (0, jsx_runtime_1.jsx)("div", Object.assign({ "data-testid": "selector-item-group", style: { maxHeight: showGroup ? maxHeight : 0 }, className: `
          sbw-overflow-hidden
          sbw-transition-all
          sbw-duration-300
        ` }, { children: (0, jsx_runtime_1.jsx)("div", Object.assign({ style: { maxHeight }, className: `
            sbw-flex
            sbw-h-full
            sbw-flex-col
            sbw-overflow-y-auto

          ` }, { children: childrenWithProps })) }))] })));
}
exports.SelectorGroup = SelectorGroup;
