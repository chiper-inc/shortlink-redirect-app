"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectField = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const SimpleDropdown_1 = require("../SimpleDropdown");
const DropdownBox_1 = require("../Dropdowns/DropdownBox");
/**
 * A `SelectField` is a field that allows user to select one option among others
 *
 * #### Interface:
 *
 * ```tsx
  interface ISelectOption {
    text: string;
    value: string;
  }
   ```
 *
 * #### Usage:
 *
 * ```tsx
  import { useState } from "react";
  import { SelectField } from "@chiper-inc/sb-web-chiper";

  const [value, setValue] = useState<string>("");

  const onChange = (itemSelected: string) => setValue(itemSelected);

  return (
    <SelectField
      name="Options"
      value={value}
      options=[
        {
          text: "option one",
          value: "1"
        },
        {
          text:"option two",
          value: "2"
        }
      ]
      onChange={onChange}
     />
  );
 * ```
 *
 * **Note**: If you use `Formik`, you should handle changes like this:
 *
 * ```tsx
  const onChange = (itemSelected: string, name: string) => {
    formik.setFieldValue(name, itemSelected);
  }
 * ```
 *
 * #### Demo:
 *
 */
exports.SelectField = (0, react_1.memo)(({ onChange, icon, placeholder, disabled, value, helperText, isValid = true, full, name, options, "data-testid": testID = "chiper-select-field", maxDropdownHeight = "180px", type = "simple", isReadOnly, }) => {
    const [isOpened, setIsOpened] = (0, react_1.useState)(false);
    const valueSelected = (0, react_1.useMemo)(() => {
        const optionSelected = options.find((item) => item.value === value);
        return optionSelected ? optionSelected === null || optionSelected === void 0 ? void 0 : optionSelected.text : "";
    }, [options, value]);
    const onItemClick = (0, react_1.useCallback)((itemSelected) => {
        setIsOpened(false);
        onChange(itemSelected, name);
    }, [name, onChange]);
    return ((0, jsx_runtime_1.jsx)(DropdownBox_1.DropdownBox, { placeholder: placeholder, "data-testid": testID, disabled: disabled, full: full, helperText: helperText, isValid: isValid, value: valueSelected, icon: icon, isOpened: isOpened, setIsOpened: setIsOpened, isReadOnly: isReadOnly, dropdown: ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: "sbw-pt-2" }, { children: (0, jsx_runtime_1.jsx)(SimpleDropdown_1.SimpleDropdown, { items: options, onItemClick: onItemClick, selectedValue: value, width: "full", maxHeight: maxDropdownHeight, type: type }) }))) }));
});
